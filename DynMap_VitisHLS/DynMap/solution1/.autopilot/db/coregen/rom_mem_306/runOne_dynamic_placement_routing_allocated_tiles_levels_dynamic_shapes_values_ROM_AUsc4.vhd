-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity runOne_dynamic_placement_routing_allocated_tiles_levels_dynamic_shapes_values_ROM_AUsc4 is 
    generic(
             DataWidth     : integer := 4; 
             AddressWidth     : integer := 11; 
             AddressRange    : integer := 1280
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of runOne_dynamic_placement_routing_allocated_tiles_levels_dynamic_shapes_values_ROM_AUsc4 is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "0101", 1 => "1001", 2 to 15=> "0000", 16 => "0001", 17 => "0100", 
    18 => "0110", 19 => "1000", 20 => "1010", 21 => "1101", 22 to 32=> "0000", 
    33 => "0010", 34 => "1100", 35 => "1110", 36 to 63=> "0000", 64 => "0110", 
    65 => "1010", 66 to 79=> "0000", 80 => "0101", 81 => "1001", 82 => "0111", 
    83 => "1011", 84 to 95=> "0000", 96 => "0010", 97 => "0011", 98 => "0100", 
    99 => "1000", 100 => "1110", 101 => "1111", 102 to 127=> "0000", 128 => "1001", 
    129 to 143=> "0000", 144 => "0100", 145 => "0101", 146 => "1000", 147 => "1010", 
    148 => "1101", 149 => "1110", 150 to 160=> "0000", 161 => "0001", 162 => "1011", 
    163 => "1100", 164 => "1111", 165 to 191=> "0000", 192 => "0001", 193 => "0010", 
    194 => "0011", 195 => "0100", 196 => "0101", 197 => "0110", 198 => "0111", 
    199 => "1000", 200 => "1001", 201 => "1010", 202 to 208=> "0000", 209 => "1011", 
    210 to 255=> "0000", 256 => "1001", 257 to 271=> "0000", 272 => "0101", 273 => "1000", 
    274 to 287=> "0000", 288 => "0100", 289 => "0110", 290 => "1010", 291 => "1100", 
    292 => "1101", 293 to 319=> "0000", 320 => "0100", 321 => "0101", 322 => "1000", 
    323 => "1001", 324 to 336=> "0000", 337 => "0001", 338 => "1100", 339 => "1101", 
    340 to 383=> "0000", 384 => "0101", 385 => "1001", 386 to 400=> "0000", 401 => "0001", 
    402 => "0100", 403 => "1010", 404 => "1101", 405 => "1110", 406 to 447=> "0000", 
    448 => "0001", 449 => "0010", 450 => "0011", 451 => "0100", 452 => "0101", 
    453 => "0110", 454 to 464=> "0000", 465 => "0111", 466 to 511=> "0000", 512 => "1001", 
    513 => "1101", 514 to 527=> "0000", 528 => "1000", 529 => "1010", 530 => "1100", 
    531 => "1110", 532 to 575=> "0000", 576 => "1000", 577 => "1101", 578 to 591=> "0000", 
    592 => "1001", 593 => "1100", 594 to 607=> "0000", 608 => "0100", 609 => "1110", 
    610 to 639=> "0000", 640 => "1001", 641 => "1110", 642 to 655=> "0000", 656 => "1010", 
    657 => "1101", 658 to 671=> "0000", 672 => "1000", 673 => "1111", 674 to 703=> "0000", 
    704 => "0001", 705 => "0010", 706 => "0011", 707 => "0100", 708 to 720=> "0000", 
    721 => "0101", 722 to 767=> "0000", 768 => "1101", 769 to 783=> "0000", 784 => "1000", 
    785 => "1001", 786 => "1100", 787 to 799=> "0000", 800 => "1110", 801 to 831=> "0000", 
    832 => "1101", 833 to 847=> "0000", 848 => "1001", 849 to 863=> "0000", 864 => "0101", 
    865 => "1100", 866 => "1110", 867 to 895=> "0000", 896 => "1000", 897 => "1100", 
    898 => "1101", 899 to 911=> "0000", 912 => "0100", 913 => "1110", 914 to 959=> "0000", 
    960 => "0001", 961 => "0010", 962 => "0011", 963 to 976=> "0000", 977 => "0100", 
    978 to 1023=> "0000", 1024 => "1000", 1025 => "1001", 1026 => "1100", 1027 => "1101", 
    1028 to 1087=> "0000", 1088 => "1100", 1089 => "1101", 1090 to 1103=> "0000", 1104 => "1000", 
    1105 => "1110", 1106 to 1151=> "0000", 1152 => "1001", 1153 => "1101", 1154 to 1167=> "0000", 
    1168 => "1000", 1169 => "1110", 1170 to 1215=> "0000", 1216 => "0001", 1217 => "0010", 
    1218 to 1232=> "0000", 1233 => "0011", 1234 to 1279=> "0000" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

