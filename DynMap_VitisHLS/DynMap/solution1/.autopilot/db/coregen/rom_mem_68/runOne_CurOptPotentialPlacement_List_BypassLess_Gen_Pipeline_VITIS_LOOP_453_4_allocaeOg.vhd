-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity runOne_CurOptPotentialPlacement_List_BypassLess_Gen_Pipeline_VITIS_LOOP_453_4_allocaeOg is 
    generic(
             DataWidth     : integer := 4; 
             AddressWidth     : integer := 9; 
             AddressRange    : integer := 320
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of runOne_CurOptPotentialPlacement_List_BypassLess_Gen_Pipeline_VITIS_LOOP_453_4_allocaeOg is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "0101", 1 => "1001", 2 => "0001", 3 => "0100", 4 => "0110", 
    5 => "1000", 6 => "1010", 7 => "1101", 8 => "0000", 9 => "0010", 
    10 => "1100", 11 => "1110", 12 to 15=> "0000", 16 => "0110", 17 => "1010", 
    18 => "0101", 19 => "1001", 20 => "0111", 21 => "1011", 22 => "0010", 
    23 => "0011", 24 => "0100", 25 => "1000", 26 => "1110", 27 => "1111", 
    28 to 31=> "0000", 32 => "1001", 33 => "0100", 34 => "0101", 35 => "1000", 
    36 => "1010", 37 => "1101", 38 => "1110", 39 => "0000", 40 => "0001", 
    41 => "1011", 42 => "1100", 43 => "1111", 44 to 47=> "0000", 48 => "0001", 
    49 => "0010", 50 => "0011", 51 => "0100", 52 => "0101", 53 => "0110", 
    54 => "0111", 55 => "1000", 56 => "1001", 57 => "1010", 58 => "0000", 
    59 => "1011", 60 to 63=> "0000", 64 => "1001", 65 => "0101", 66 => "1000", 
    67 => "0100", 68 => "0110", 69 => "1010", 70 => "1100", 71 => "1101", 
    72 to 79=> "0000", 80 => "0100", 81 => "0101", 82 => "1000", 83 => "1001", 
    84 => "0000", 85 => "0001", 86 => "1100", 87 => "1101", 88 to 95=> "0000", 
    96 => "0101", 97 => "1001", 98 => "0000", 99 => "0001", 100 => "0100", 
    101 => "1010", 102 => "1101", 103 => "1110", 104 to 111=> "0000", 112 => "0001", 
    113 => "0010", 114 => "0011", 115 => "0100", 116 => "0101", 117 => "0110", 
    118 => "0000", 119 => "0111", 120 to 127=> "0000", 128 => "1001", 129 => "1101", 
    130 => "1000", 131 => "1010", 132 => "1100", 133 => "1110", 134 to 143=> "0000", 
    144 => "1000", 145 => "1101", 146 => "1001", 147 => "1100", 148 => "0100", 
    149 => "1110", 150 to 159=> "0000", 160 => "1001", 161 => "1110", 162 => "1010", 
    163 => "1101", 164 => "1000", 165 => "1111", 166 to 175=> "0000", 176 => "0001", 
    177 => "0010", 178 => "0011", 179 => "0100", 180 => "0000", 181 => "0101", 
    182 to 191=> "0000", 192 => "1101", 193 => "1000", 194 => "1001", 195 => "1100", 
    196 => "1110", 197 to 207=> "0000", 208 => "1101", 209 => "1001", 210 => "0101", 
    211 => "1100", 212 => "1110", 213 to 223=> "0000", 224 => "1000", 225 => "1100", 
    226 => "1101", 227 => "0100", 228 => "1110", 229 to 239=> "0000", 240 => "0001", 
    241 => "0010", 242 => "0011", 243 => "0000", 244 => "0100", 245 to 255=> "0000", 
    256 => "1000", 257 => "1001", 258 => "1100", 259 => "1101", 260 to 271=> "0000", 
    272 => "1100", 273 => "1101", 274 => "1000", 275 => "1110", 276 to 287=> "0000", 
    288 => "1001", 289 => "1101", 290 => "1000", 291 => "1110", 292 to 303=> "0000", 
    304 => "0001", 305 => "0010", 306 => "0000", 307 => "0011", 308 to 319=> "0000" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

