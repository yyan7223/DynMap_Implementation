-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity runOne_Reset_Pipeline_VITIS_LOOP_719_18_placement_static_kernels_values_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 6; 
             AddressWidth     : integer := 10; 
             AddressRange    : integer := 600
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of runOne_Reset_Pipeline_VITIS_LOOP_719_18_placement_static_kernels_values_ROM_AUTO_1R is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "000000", 1 => "000001", 2 => "000010", 3 => "000011", 4 => "000100", 
    5 => "011010", 6 => "100111", 7 => "000101", 8 => "011000", 9 => "011011", 
    10 => "100101", 11 => "101000", 12 => "000110", 13 => "011100", 14 => "101001", 
    15 => "000111", 16 => "001000", 17 => "001001", 18 => "001010", 19 => "010011", 
    20 => "011101", 21 => "100000", 22 => "001011", 23 => "001100", 24 => "001101", 
    25 => "001110", 26 => "010100", 27 => "011110", 28 => "100001", 29 => "001111", 
    30 => "010101", 31 => "011111", 32 => "100010", 33 => "010000", 34 => "100011", 
    35 => "010001", 36 => "100100", 37 => "010010", 38 => "100110", 39 => "010110", 
    40 => "010111", 41 => "011001", 42 to 100=> "000000", 101 => "100111", 102 => "101000", 
    103 => "101001", 104 => "000001", 105 => "000010", 106 => "010001", 107 => "011100", 
    108 => "000011", 109 => "010010", 110 => "010111", 111 => "011010", 112 => "011101", 
    113 => "100010", 114 => "100101", 115 => "000100", 116 => "010011", 117 => "011000", 
    118 => "011110", 119 => "100011", 120 => "000101", 121 => "001001", 122 => "000110", 
    123 => "001010", 124 => "010101", 125 => "100000", 126 => "000111", 127 => "001011", 
    128 => "001000", 129 => "001100", 130 => "001110", 131 => "001111", 132 => "001101", 
    133 => "010000", 134 => "010100", 135 => "011001", 136 => "011111", 137 => "100100", 
    138 => "010110", 139 => "011011", 140 => "100001", 141 => "100110", 142 to 200=> "000000", 
    201 => "010110", 202 => "011101", 203 => "011110", 204 => "011111", 205 => "000001", 
    206 => "001101", 207 => "010111", 208 => "000010", 209 => "000111", 210 => "001010", 
    211 => "001110", 212 => "011000", 213 => "000011", 214 => "001000", 215 => "001011", 
    216 => "001111", 217 => "011001", 218 => "000100", 219 => "001001", 220 => "001100", 
    221 => "010000", 222 => "011010", 223 => "000101", 224 => "010001", 225 => "011011", 
    226 => "000110", 227 => "010010", 228 => "010011", 229 => "010100", 230 => "010101", 
    231 => "011100", 232 to 299=> "000000", 300 => "011100", 301 => "011101", 302 => "011110", 
    303 => "000000", 304 => "000011", 305 => "000100", 306 => "000101", 307 => "011011", 
    308 => "000001", 309 => "000010", 310 => "000110", 311 => "001001", 312 => "001111", 
    313 => "010101", 314 => "000111", 315 => "001010", 316 => "010000", 317 => "010110", 
    318 => "001000", 319 => "001011", 320 => "010001", 321 => "010111", 322 => "001100", 
    323 => "010010", 324 => "011000", 325 => "001101", 326 => "010011", 327 => "001110", 
    328 => "010100", 329 => "011001", 330 => "011010", 331 to 399=> "000000", 400 => "000001", 
    401 => "010010", 402 => "010011", 403 => "010100", 404 => "000000", 405 => "000010", 
    406 => "000100", 407 => "001010", 408 => "010001", 409 => "000011", 410 => "000101", 
    411 => "001011", 412 => "000110", 413 => "001100", 414 => "000111", 415 => "001101", 
    416 => "001000", 417 => "001110", 418 => "001001", 419 => "001111", 420 => "010000", 
    421 to 499=> "000000", 500 => "001110", 501 => "001111", 502 => "010000", 503 => "000000", 
    504 => "000010", 505 => "000011", 506 => "000100", 507 => "000101", 508 => "000110", 
    509 => "001001", 510 => "000111", 511 => "001010", 512 => "001000", 513 => "001011", 
    514 => "001100", 515 => "001101", 516 => "000001", 517 to 599=> "000000" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

