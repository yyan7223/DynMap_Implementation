// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_199_2_VITIS_LOOP_233_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Tile2XY_0_load,
        cmp28,
        and_ln205,
        Tile2XY_1_load,
        cmp77,
        and_ln218,
        sub_ln192,
        CGRA_NumTiles_shapes_values_load,
        shape_idx_load,
        yDiff_2_phi_out,
        yDiff_2_phi_out_ap_vld,
        xDiff_2_phi_out,
        xDiff_2_phi_out_ap_vld,
        i_50_out,
        i_50_out_ap_vld,
        xDiff_2_out,
        xDiff_2_out_ap_vld,
        yDiff_2_out,
        yDiff_2_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] Tile2XY_0_load;
input  [0:0] cmp28;
input  [0:0] and_ln205;
input  [1:0] Tile2XY_1_load;
input  [0:0] cmp77;
input  [0:0] and_ln218;
input  [5:0] sub_ln192;
input  [3:0] CGRA_NumTiles_shapes_values_load;
input  [4:0] shape_idx_load;
output  [1:0] yDiff_2_phi_out;
output   yDiff_2_phi_out_ap_vld;
output  [1:0] xDiff_2_phi_out;
output   xDiff_2_phi_out_ap_vld;
output  [3:0] i_50_out;
output   i_50_out_ap_vld;
output  [1:0] xDiff_2_out;
output   xDiff_2_out_ap_vld;
output  [1:0] yDiff_2_out;
output   yDiff_2_out_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] yDiff_2_phi_out;
reg yDiff_2_phi_out_ap_vld;
reg[1:0] xDiff_2_phi_out;
reg xDiff_2_phi_out_ap_vld;
reg[3:0] i_50_out;
reg i_50_out_ap_vld;
reg xDiff_2_out_ap_vld;
reg yDiff_2_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] bpsStride_0_address0;
reg    bpsStride_0_ce0;
wire   [0:0] bpsStride_0_q0;
reg   [1:0] bpsStride_1_address0;
reg    bpsStride_1_ce0;
wire   [0:0] bpsStride_1_q0;
wire   [3:0] xy2Tile_address0;
reg    xy2Tile_ce0;
wire   [3:0] xy2Tile_q0;
wire   [8:0] allocated_tiles_shapes_values_address0;
reg    allocated_tiles_shapes_values_ce0;
wire   [3:0] allocated_tiles_shapes_values_q0;
reg   [1:0] i_49_reg_687;
wire    ap_CS_fsm_state2;
reg   [5:0] indvar_flatten_load_reg_693;
wire   [0:0] icmp_ln199_fu_318_p2;
reg   [0:0] icmp_ln199_reg_708;
reg   [3:0] i_48_load_1_reg_712;
wire   [0:0] icmp_ln233_fu_323_p2;
reg   [0:0] icmp_ln233_reg_717;
wire   [3:0] select_ln199_fu_328_p3;
reg   [3:0] select_ln199_reg_725;
reg   [0:0] xDiff_reg_735;
wire    ap_CS_fsm_state3;
reg   [0:0] yDiff_reg_741;
wire   [1:0] select_ln199_2_fu_359_p3;
reg   [1:0] select_ln199_2_reg_757;
reg   [3:0] allocated_tiles_shapes_values_load_reg_762;
wire   [1:0] xDiff_2_fu_387_p3;
reg   [1:0] xDiff_2_reg_767;
wire    ap_CS_fsm_state4;
wire   [1:0] yDiff_2_fu_421_p3;
reg   [1:0] yDiff_2_reg_773;
wire   [5:0] add_ln199_1_fu_467_p2;
reg   [5:0] add_ln199_1_reg_779;
reg   [1:0] xDiff_2_phi_load_1_reg_789;
wire    ap_CS_fsm_state5;
reg   [1:0] yDiff_2_phi_load_1_reg_794;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_271_p4;
reg   [0:0] UnifiedRetVal_reg_267;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln199_fu_312_p1;
wire   [63:0] zext_ln234_fu_343_p1;
wire   [63:0] zext_ln199_1_fu_353_p1;
wire   [63:0] zext_ln199_2_fu_541_p1;
reg   [3:0] i_48_fu_90;
wire   [3:0] i_50_fu_563_p2;
wire   [0:0] icmp_ln234_fu_558_p2;
reg   [1:0] xDiff_2_phi_fu_94;
wire   [1:0] select_ln199_4_fu_552_p3;
reg   [1:0] yDiff_2_phi_fu_98;
wire   [1:0] select_ln199_3_fu_546_p3;
reg   [1:0] i_fu_102;
reg   [5:0] indvar_flatten_fu_106;
wire   [8:0] tmp_27_fu_336_p3;
wire   [1:0] add_ln199_fu_348_p2;
wire   [1:0] zext_ln202_fu_365_p1;
wire   [1:0] select_ln197_fu_373_p3;
wire   [1:0] xDiff_1_fu_380_p3;
wire   [1:0] zext_ln215_fu_399_p1;
wire   [1:0] select_ln197_1_fu_407_p3;
wire   [1:0] yDiff_1_fu_414_p3;
wire   [1:0] empty_226_fu_428_p2;
wire   [1:0] y_2_fu_402_p2;
wire   [1:0] empty_227_fu_433_p3;
wire   [1:0] empty_fu_394_p2;
wire   [1:0] x_2_fu_368_p2;
wire   [1:0] empty_228_fu_446_p3;
wire   [1:0] select_ln205_fu_453_p3;
wire   [1:0] y_fu_440_p3;
wire   [1:0] xDiff_cast_mid1_fu_472_p1;
wire   [1:0] yDiff_cast_mid1_fu_486_p1;
wire   [1:0] p_mid112_fu_495_p2;
wire   [1:0] y_2_mid1_fu_490_p2;
wire   [1:0] p_mid114_fu_500_p3;
wire   [1:0] p_mid1_fu_481_p2;
wire   [1:0] x_2_mid1_fu_476_p2;
wire   [1:0] empty_229_fu_513_p3;
wire   [1:0] select_ln205_1_fu_520_p3;
wire   [1:0] select_ln218_fu_507_p3;
wire   [3:0] tmp_fu_459_p3;
wire   [3:0] tmp_s_fu_526_p3;
wire   [3:0] select_ln199_1_fu_534_p3;
reg   [0:0] ap_return_preg;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_return_preg = 1'd0;
end

runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_199_2_VITIS_LOOP_233_3_bpsSlbW #(
    .DataWidth( 1 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
bpsStride_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bpsStride_0_address0),
    .ce0(bpsStride_0_ce0),
    .q0(bpsStride_0_q0)
);

runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_199_2_VITIS_LOOP_233_3_bpsSmb6 #(
    .DataWidth( 1 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
bpsStride_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bpsStride_1_address0),
    .ce0(bpsStride_1_ce0),
    .q0(bpsStride_1_q0)
);

runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_199_2_VITIS_LOOP_233_3_xy2Tncg #(
    .DataWidth( 4 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
xy2Tile_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(xy2Tile_address0),
    .ce0(xy2Tile_ce0),
    .q0(xy2Tile_q0)
);

runOne_CurOptPotentialPlacement_List_BypassLess_Gen_Pipeline_VITIS_LOOP_453_4_allocaeOg #(
    .DataWidth( 4 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
allocated_tiles_shapes_values_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(allocated_tiles_shapes_values_address0),
    .ce0(allocated_tiles_shapes_values_ce0),
    .q0(allocated_tiles_shapes_values_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_271_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln199_reg_708 == 1'd0))) begin
        UnifiedRetVal_reg_267 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        UnifiedRetVal_reg_267 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_48_fu_90 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln234_fu_558_p2 == 1'd0) & (icmp_ln199_reg_708 == 1'd0))) begin
        i_48_fu_90 <= i_50_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_102 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln234_fu_558_p2 == 1'd0) & (icmp_ln199_reg_708 == 1'd0))) begin
        i_fu_102 <= select_ln199_2_reg_757;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_fu_106 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln234_fu_558_p2 == 1'd0) & (icmp_ln199_reg_708 == 1'd0))) begin
        indvar_flatten_fu_106 <= add_ln199_1_reg_779;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln199_1_reg_779 <= add_ln199_1_fu_467_p2;
        xDiff_2_reg_767 <= xDiff_2_fu_387_p3;
        yDiff_2_reg_773 <= yDiff_2_fu_421_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln199_reg_708 == 1'd0))) begin
        allocated_tiles_shapes_values_load_reg_762 <= allocated_tiles_shapes_values_q0;
        select_ln199_2_reg_757 <= select_ln199_2_fu_359_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln199_fu_318_p2 == 1'd0))) begin
        i_48_load_1_reg_712 <= i_48_fu_90;
        icmp_ln233_reg_717 <= icmp_ln233_fu_323_p2;
        select_ln199_reg_725 <= select_ln199_fu_328_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_49_reg_687 <= i_fu_102;
        icmp_ln199_reg_708 <= icmp_ln199_fu_318_p2;
        indvar_flatten_load_reg_693 <= indvar_flatten_fu_106;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln234_fu_558_p2 == 1'd0) & (icmp_ln199_reg_708 == 1'd0))) begin
        xDiff_2_phi_fu_94 <= select_ln199_4_fu_552_p3;
        yDiff_2_phi_fu_98 <= select_ln199_3_fu_546_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln199_reg_708 == 1'd0))) begin
        xDiff_2_phi_load_1_reg_789 <= xDiff_2_phi_fu_94;
        yDiff_2_phi_load_1_reg_794 <= yDiff_2_phi_fu_98;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xDiff_reg_735 <= bpsStride_0_q0;
        yDiff_reg_741 <= bpsStride_1_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        allocated_tiles_shapes_values_ce0 = 1'b1;
    end else begin
        allocated_tiles_shapes_values_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln199_reg_708 == 1'd0))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_271_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_271_p4 = UnifiedRetVal_reg_267;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_271_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bpsStride_0_address0 = zext_ln199_1_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bpsStride_0_address0 = zext_ln199_fu_312_p1;
    end else begin
        bpsStride_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        bpsStride_0_ce0 = 1'b1;
    end else begin
        bpsStride_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bpsStride_1_address0 = zext_ln199_1_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bpsStride_1_address0 = zext_ln199_fu_312_p1;
    end else begin
        bpsStride_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        bpsStride_1_ce0 = 1'b1;
    end else begin
        bpsStride_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_50_out = i_48_fu_90;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln199_reg_708 == 1'd0))) begin
        i_50_out = i_48_load_1_reg_712;
    end else begin
        i_50_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln199_reg_708 == 1'd0)))) begin
        i_50_out_ap_vld = 1'b1;
    end else begin
        i_50_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln199_reg_708 == 1'd0)))) begin
        xDiff_2_out_ap_vld = 1'b1;
    end else begin
        xDiff_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        xDiff_2_phi_out = xDiff_2_phi_fu_94;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln199_reg_708 == 1'd0))) begin
        xDiff_2_phi_out = xDiff_2_phi_load_1_reg_789;
    end else begin
        xDiff_2_phi_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln199_reg_708 == 1'd0)))) begin
        xDiff_2_phi_out_ap_vld = 1'b1;
    end else begin
        xDiff_2_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xy2Tile_ce0 = 1'b1;
    end else begin
        xy2Tile_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln199_reg_708 == 1'd0)))) begin
        yDiff_2_out_ap_vld = 1'b1;
    end else begin
        yDiff_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        yDiff_2_phi_out = yDiff_2_phi_fu_98;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln199_reg_708 == 1'd0))) begin
        yDiff_2_phi_out = yDiff_2_phi_load_1_reg_794;
    end else begin
        yDiff_2_phi_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln199_reg_708 == 1'd0)))) begin
        yDiff_2_phi_out_ap_vld = 1'b1;
    end else begin
        yDiff_2_phi_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln234_fu_558_p2 == 1'd0) & (icmp_ln199_reg_708 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln199_reg_708 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln199_1_fu_467_p2 = (indvar_flatten_load_reg_693 + 6'd1);

assign add_ln199_fu_348_p2 = (i_49_reg_687 + 2'd1);

assign allocated_tiles_shapes_values_address0 = zext_ln234_fu_343_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign empty_226_fu_428_p2 = (zext_ln215_fu_399_p1 + Tile2XY_1_load);

assign empty_227_fu_433_p3 = ((cmp77[0:0] == 1'b1) ? empty_226_fu_428_p2 : y_2_fu_402_p2);

assign empty_228_fu_446_p3 = ((cmp28[0:0] == 1'b1) ? empty_fu_394_p2 : x_2_fu_368_p2);

assign empty_229_fu_513_p3 = ((cmp28[0:0] == 1'b1) ? p_mid1_fu_481_p2 : x_2_mid1_fu_476_p2);

assign empty_fu_394_p2 = (zext_ln202_fu_365_p1 + Tile2XY_0_load);

assign i_50_fu_563_p2 = (select_ln199_reg_725 + 4'd1);

assign icmp_ln199_fu_318_p2 = ((indvar_flatten_fu_106 == sub_ln192) ? 1'b1 : 1'b0);

assign icmp_ln233_fu_323_p2 = ((i_48_fu_90 < CGRA_NumTiles_shapes_values_load) ? 1'b1 : 1'b0);

assign icmp_ln234_fu_558_p2 = ((allocated_tiles_shapes_values_load_reg_762 == xy2Tile_q0) ? 1'b1 : 1'b0);

assign p_mid112_fu_495_p2 = (yDiff_cast_mid1_fu_486_p1 + Tile2XY_1_load);

assign p_mid114_fu_500_p3 = ((cmp77[0:0] == 1'b1) ? p_mid112_fu_495_p2 : y_2_mid1_fu_490_p2);

assign p_mid1_fu_481_p2 = (xDiff_cast_mid1_fu_472_p1 + Tile2XY_0_load);

assign select_ln197_1_fu_407_p3 = ((yDiff_reg_741[0:0] == 1'b1) ? 2'd3 : 2'd0);

assign select_ln197_fu_373_p3 = ((xDiff_reg_735[0:0] == 1'b1) ? 2'd3 : 2'd0);

assign select_ln199_1_fu_534_p3 = ((icmp_ln233_reg_717[0:0] == 1'b1) ? tmp_fu_459_p3 : tmp_s_fu_526_p3);

assign select_ln199_2_fu_359_p3 = ((icmp_ln233_reg_717[0:0] == 1'b1) ? i_49_reg_687 : add_ln199_fu_348_p2);

assign select_ln199_3_fu_546_p3 = ((icmp_ln233_reg_717[0:0] == 1'b1) ? yDiff_2_phi_fu_98 : yDiff_2_reg_773);

assign select_ln199_4_fu_552_p3 = ((icmp_ln233_reg_717[0:0] == 1'b1) ? xDiff_2_phi_fu_94 : xDiff_2_reg_767);

assign select_ln199_fu_328_p3 = ((icmp_ln233_fu_323_p2[0:0] == 1'b1) ? i_48_fu_90 : 4'd0);

assign select_ln205_1_fu_520_p3 = ((and_ln205[0:0] == 1'b1) ? Tile2XY_0_load : empty_229_fu_513_p3);

assign select_ln205_fu_453_p3 = ((and_ln205[0:0] == 1'b1) ? Tile2XY_0_load : empty_228_fu_446_p3);

assign select_ln218_fu_507_p3 = ((and_ln218[0:0] == 1'b1) ? Tile2XY_1_load : p_mid114_fu_500_p3);

assign tmp_27_fu_336_p3 = {{shape_idx_load}, {select_ln199_fu_328_p3}};

assign tmp_fu_459_p3 = {{select_ln205_fu_453_p3}, {y_fu_440_p3}};

assign tmp_s_fu_526_p3 = {{select_ln205_1_fu_520_p3}, {select_ln218_fu_507_p3}};

assign xDiff_1_fu_380_p3 = ((cmp28[0:0] == 1'b1) ? zext_ln202_fu_365_p1 : select_ln197_fu_373_p3);

assign xDiff_2_fu_387_p3 = ((and_ln205[0:0] == 1'b1) ? 2'd0 : xDiff_1_fu_380_p3);

assign xDiff_2_out = xDiff_2_reg_767;

assign xDiff_cast_mid1_fu_472_p1 = bpsStride_0_q0;

assign x_2_fu_368_p2 = (Tile2XY_0_load - zext_ln202_fu_365_p1);

assign x_2_mid1_fu_476_p2 = (Tile2XY_0_load - xDiff_cast_mid1_fu_472_p1);

assign xy2Tile_address0 = zext_ln199_2_fu_541_p1;

assign yDiff_1_fu_414_p3 = ((cmp77[0:0] == 1'b1) ? zext_ln215_fu_399_p1 : select_ln197_1_fu_407_p3);

assign yDiff_2_fu_421_p3 = ((and_ln218[0:0] == 1'b1) ? 2'd0 : yDiff_1_fu_414_p3);

assign yDiff_2_out = yDiff_2_reg_773;

assign yDiff_cast_mid1_fu_486_p1 = bpsStride_1_q0;

assign y_2_fu_402_p2 = (Tile2XY_1_load - zext_ln215_fu_399_p1);

assign y_2_mid1_fu_490_p2 = (Tile2XY_1_load - yDiff_cast_mid1_fu_486_p1);

assign y_fu_440_p3 = ((and_ln218[0:0] == 1'b1) ? Tile2XY_1_load : empty_227_fu_433_p3);

assign zext_ln199_1_fu_353_p1 = add_ln199_fu_348_p2;

assign zext_ln199_2_fu_541_p1 = select_ln199_1_fu_534_p3;

assign zext_ln199_fu_312_p1 = i_fu_102;

assign zext_ln202_fu_365_p1 = xDiff_reg_735;

assign zext_ln215_fu_399_p1 = yDiff_reg_741;

assign zext_ln234_fu_343_p1 = tmp_27_fu_336_p3;

endmodule //runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_199_2_VITIS_LOOP_233_3
