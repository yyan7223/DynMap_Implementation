// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runOne_dynamic_placement_routing_Pipeline_VITIS_LOOP_377_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        curTileStatic,
        tileID_out,
        tileID_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] curTileStatic;
output  [3:0] tileID_out;
output   tileID_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg tileID_out_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] placement_static_Tile2Level_keys_address0;
reg    placement_static_Tile2Level_keys_ce0;
wire   [3:0] placement_static_Tile2Level_keys_q0;
wire   [3:0] empty_fu_80_p1;
reg   [3:0] empty_reg_124;
wire    ap_CS_fsm_state2;
reg   [0:0] tmp_reg_129;
wire   [4:0] tileID_2_fu_92_p2;
reg   [4:0] tileID_2_reg_133;
wire   [63:0] trunc_ln377_cast4_fu_98_p1;
reg   [4:0] tileID_fu_42;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln378_fu_103_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

runOne_dynamic_placement_routing_Pipeline_VITIS_LOOP_377_1_placement_static_Tile2LevkbM #(
    .DataWidth( 4 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
placement_static_Tile2Level_keys_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(placement_static_Tile2Level_keys_address0),
    .ce0(placement_static_Tile2Level_keys_ce0),
    .q0(placement_static_Tile2Level_keys_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tileID_fu_42 <= 5'd0;
    end else if (((icmp_ln378_fu_103_p2 == 1'd0) & (tmp_reg_129 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tileID_fu_42 <= tileID_2_reg_133;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_reg_124 <= empty_fu_80_p1;
        tileID_2_reg_133 <= tileID_2_fu_92_p2;
        tmp_reg_129 <= tileID_fu_42[32'd4];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        placement_static_Tile2Level_keys_ce0 = 1'b1;
    end else begin
        placement_static_Tile2Level_keys_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((tmp_reg_129 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        tileID_out_ap_vld = 1'b1;
    end else begin
        tileID_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln378_fu_103_p2 == 1'd0) & (tmp_reg_129 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((tmp_reg_129 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign empty_fu_80_p1 = tileID_fu_42[3:0];

assign icmp_ln378_fu_103_p2 = ((placement_static_Tile2Level_keys_q0 == curTileStatic) ? 1'b1 : 1'b0);

assign placement_static_Tile2Level_keys_address0 = trunc_ln377_cast4_fu_98_p1;

assign tileID_2_fu_92_p2 = (tileID_fu_42 + 5'd1);

assign tileID_out = empty_reg_124;

assign trunc_ln377_cast4_fu_98_p1 = tileID_fu_42;

endmodule //runOne_dynamic_placement_routing_Pipeline_VITIS_LOOP_377_1
