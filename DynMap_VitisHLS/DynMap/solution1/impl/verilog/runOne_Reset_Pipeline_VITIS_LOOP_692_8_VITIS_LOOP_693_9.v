// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runOne_Reset_Pipeline_VITIS_LOOP_692_8_VITIS_LOOP_693_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        placement_dynamic_occupy_address0,
        placement_dynamic_occupy_ce0,
        placement_dynamic_occupy_we0,
        placement_dynamic_occupy_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] placement_dynamic_occupy_address0;
output   placement_dynamic_occupy_ce0;
output   placement_dynamic_occupy_we0;
output  [0:0] placement_dynamic_occupy_d0;

reg ap_idle;
reg placement_dynamic_occupy_ce0;
reg placement_dynamic_occupy_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln692_fu_90_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln694_1_fu_154_p1;
reg   [4:0] j_fu_46;
wire   [4:0] add_ln693_fu_159_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [6:0] i_13_fu_50;
wire   [6:0] select_ln692_1_fu_128_p3;
reg   [6:0] ap_sig_allocacmp_i_13_load;
reg   [10:0] indvar_flatten23_fu_54;
wire   [10:0] add_ln692_1_fu_96_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten23_load;
wire   [0:0] icmp_ln693_fu_114_p2;
wire   [6:0] add_ln692_fu_108_p2;
wire   [4:0] select_ln692_fu_120_p3;
wire   [10:0] tmp_s_fu_136_p3;
wire   [10:0] zext_ln694_fu_144_p1;
wire   [10:0] add_ln694_fu_148_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

runOne_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln692_fu_90_p2 == 1'd0)) begin
            i_13_fu_50 <= select_ln692_1_fu_128_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_13_fu_50 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln692_fu_90_p2 == 1'd0)) begin
            indvar_flatten23_fu_54 <= add_ln692_1_fu_96_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten23_fu_54 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln692_fu_90_p2 == 1'd0)) begin
            j_fu_46 <= add_ln693_fu_159_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_46 <= 5'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln692_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_13_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_13_load = i_13_fu_50;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten23_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten23_load = indvar_flatten23_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_46;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        placement_dynamic_occupy_ce0 = 1'b1;
    end else begin
        placement_dynamic_occupy_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln692_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        placement_dynamic_occupy_we0 = 1'b1;
    end else begin
        placement_dynamic_occupy_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln692_1_fu_96_p2 = (ap_sig_allocacmp_indvar_flatten23_load + 11'd1);

assign add_ln692_fu_108_p2 = (ap_sig_allocacmp_i_13_load + 7'd1);

assign add_ln693_fu_159_p2 = (select_ln692_fu_120_p3 + 5'd1);

assign add_ln694_fu_148_p2 = (tmp_s_fu_136_p3 + zext_ln694_fu_144_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln692_fu_90_p2 = ((ap_sig_allocacmp_indvar_flatten23_load == 11'd1600) ? 1'b1 : 1'b0);

assign icmp_ln693_fu_114_p2 = ((ap_sig_allocacmp_j_load == 5'd16) ? 1'b1 : 1'b0);

assign placement_dynamic_occupy_address0 = zext_ln694_1_fu_154_p1;

assign placement_dynamic_occupy_d0 = 1'd0;

assign select_ln692_1_fu_128_p3 = ((icmp_ln693_fu_114_p2[0:0] == 1'b1) ? add_ln692_fu_108_p2 : ap_sig_allocacmp_i_13_load);

assign select_ln692_fu_120_p3 = ((icmp_ln693_fu_114_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign tmp_s_fu_136_p3 = {{select_ln692_1_fu_128_p3}, {4'd0}};

assign zext_ln694_1_fu_154_p1 = add_ln694_fu_148_p2;

assign zext_ln694_fu_144_p1 = select_ln692_fu_120_p3;

endmodule //runOne_Reset_Pipeline_VITIS_LOOP_692_8_VITIS_LOOP_693_9
