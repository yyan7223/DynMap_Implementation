// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runOne_Reset_Pipeline_VITIS_LOOP_724_19_VITIS_LOOP_726_20 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add_ln724,
        mul_ln727,
        dependency_predecessor_values_address0,
        dependency_predecessor_values_ce0,
        dependency_predecessor_values_we0,
        dependency_predecessor_values_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] add_ln724;
input  [9:0] mul_ln727;
output  [9:0] dependency_predecessor_values_address0;
output   dependency_predecessor_values_ce0;
output   dependency_predecessor_values_we0;
output  [7:0] dependency_predecessor_values_d0;

reg ap_idle;
reg dependency_predecessor_values_ce0;
reg dependency_predecessor_values_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln724_fu_130_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [12:0] dependency_predecessors_kernels_values1_address0;
reg    dependency_predecessors_kernels_values1_ce0;
wire   [5:0] dependency_predecessors_kernels_values1_q0;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] select_ln724_fu_160_p3;
reg   [3:0] select_ln724_reg_349;
reg   [3:0] select_ln724_reg_349_pp0_iter1_reg;
reg   [3:0] select_ln724_reg_349_pp0_iter2_reg;
wire   [5:0] select_ln724_1_fu_168_p3;
reg   [5:0] select_ln724_1_reg_356;
reg   [5:0] select_ln724_1_reg_356_pp0_iter1_reg;
reg   [5:0] select_ln724_1_reg_356_pp0_iter2_reg;
reg   [5:0] dependency_predecessors_kernels_values1_load_reg_368;
wire   [63:0] zext_ln727_2_fu_240_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln732_5_fu_282_p1;
reg   [3:0] j_fu_62;
wire   [3:0] add_ln726_fu_176_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [5:0] i_fu_66;
reg   [5:0] ap_sig_allocacmp_i_load;
reg   [9:0] indvar_flatten53_fu_70;
wire   [9:0] add_ln724_1_fu_136_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten53_load;
wire   [0:0] icmp_ln726_fu_154_p2;
wire   [5:0] i_13_fu_148_p2;
wire   [9:0] zext_ln732_fu_197_p1;
wire   [9:0] add_ln727_fu_200_p2;
wire   [10:0] tmp_fu_213_p3;
wire   [12:0] p_shl_cast_fu_205_p3;
wire   [12:0] zext_ln727_1_fu_221_p1;
wire   [12:0] add_ln727_1_fu_225_p2;
wire   [12:0] zext_ln732_3_fu_231_p1;
wire   [12:0] add_ln727_2_fu_234_p2;
wire   [8:0] tmp_s_fu_245_p3;
wire   [6:0] tmp_6_fu_256_p3;
wire   [9:0] zext_ln732_1_fu_252_p1;
wire   [9:0] zext_ln732_2_fu_263_p1;
wire   [9:0] add_ln732_fu_267_p2;
wire   [9:0] zext_ln732_4_fu_273_p1;
wire   [9:0] add_ln732_1_fu_276_p2;
wire   [0:0] icmp_ln727_fu_287_p2;
wire   [0:0] icmp_ln727_1_fu_295_p2;
wire   [0:0] or_ln727_fu_300_p2;
wire   [6:0] zext_ln727_fu_292_p1;
wire   [6:0] select_ln727_fu_306_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

runOne_Reset_Pipeline_VITIS_LOOP_724_19_VITIS_LOOP_726_20_dependency_predecessors_kebkb #(
    .DataWidth( 6 ),
    .AddressRange( 6000 ),
    .AddressWidth( 13 ))
dependency_predecessors_kernels_values1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dependency_predecessors_kernels_values1_address0),
    .ce0(dependency_predecessors_kernels_values1_ce0),
    .q0(dependency_predecessors_kernels_values1_q0)
);

runOne_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln724_fu_130_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_66 <= select_ln724_1_fu_168_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln724_fu_130_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten53_fu_70 <= add_ln724_1_fu_136_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten53_fu_70 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln724_fu_130_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_62 <= add_ln726_fu_176_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_62 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln724_1_reg_356_pp0_iter1_reg <= select_ln724_1_reg_356;
        select_ln724_reg_349_pp0_iter1_reg <= select_ln724_reg_349;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        dependency_predecessors_kernels_values1_load_reg_368 <= dependency_predecessors_kernels_values1_q0;
        select_ln724_1_reg_356_pp0_iter2_reg <= select_ln724_1_reg_356_pp0_iter1_reg;
        select_ln724_reg_349_pp0_iter2_reg <= select_ln724_reg_349_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln724_fu_130_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln724_1_reg_356 <= select_ln724_1_fu_168_p3;
        select_ln724_reg_349 <= select_ln724_fu_160_p3;
    end
end

always @ (*) begin
    if (((icmp_ln724_fu_130_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten53_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten53_load = indvar_flatten53_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dependency_predecessor_values_ce0 = 1'b1;
    end else begin
        dependency_predecessor_values_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dependency_predecessor_values_we0 = 1'b1;
    end else begin
        dependency_predecessor_values_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dependency_predecessors_kernels_values1_ce0 = 1'b1;
    end else begin
        dependency_predecessors_kernels_values1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln724_1_fu_136_p2 = (ap_sig_allocacmp_indvar_flatten53_load + 10'd1);

assign add_ln726_fu_176_p2 = (select_ln724_fu_160_p3 + 4'd1);

assign add_ln727_1_fu_225_p2 = (p_shl_cast_fu_205_p3 + zext_ln727_1_fu_221_p1);

assign add_ln727_2_fu_234_p2 = (add_ln727_1_fu_225_p2 + zext_ln732_3_fu_231_p1);

assign add_ln727_fu_200_p2 = (mul_ln727 + zext_ln732_fu_197_p1);

assign add_ln732_1_fu_276_p2 = (add_ln732_fu_267_p2 + zext_ln732_4_fu_273_p1);

assign add_ln732_fu_267_p2 = (zext_ln732_1_fu_252_p1 + zext_ln732_2_fu_263_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dependency_predecessor_values_address0 = zext_ln732_5_fu_282_p1;

assign dependency_predecessor_values_d0 = $signed(select_ln727_fu_306_p3);

assign dependency_predecessors_kernels_values1_address0 = zext_ln727_2_fu_240_p1;

assign i_13_fu_148_p2 = (ap_sig_allocacmp_i_load + 6'd1);

assign icmp_ln724_fu_130_p2 = ((ap_sig_allocacmp_indvar_flatten53_load == add_ln724) ? 1'b1 : 1'b0);

assign icmp_ln726_fu_154_p2 = ((ap_sig_allocacmp_j_load == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln727_1_fu_295_p2 = ((dependency_predecessors_kernels_values1_load_reg_368 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln727_fu_287_p2 = ((select_ln724_reg_349_pp0_iter2_reg == 4'd0) ? 1'b1 : 1'b0);

assign or_ln727_fu_300_p2 = (icmp_ln727_fu_287_p2 | icmp_ln727_1_fu_295_p2);

assign p_shl_cast_fu_205_p3 = {{add_ln727_fu_200_p2}, {3'd0}};

assign select_ln724_1_fu_168_p3 = ((icmp_ln726_fu_154_p2[0:0] == 1'b1) ? i_13_fu_148_p2 : ap_sig_allocacmp_i_load);

assign select_ln724_fu_160_p3 = ((icmp_ln726_fu_154_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign select_ln727_fu_306_p3 = ((or_ln727_fu_300_p2[0:0] == 1'b1) ? zext_ln727_fu_292_p1 : 7'd127);

assign tmp_6_fu_256_p3 = {{select_ln724_1_reg_356_pp0_iter2_reg}, {1'd0}};

assign tmp_fu_213_p3 = {{add_ln727_fu_200_p2}, {1'd0}};

assign tmp_s_fu_245_p3 = {{select_ln724_1_reg_356_pp0_iter2_reg}, {3'd0}};

assign zext_ln727_1_fu_221_p1 = tmp_fu_213_p3;

assign zext_ln727_2_fu_240_p1 = add_ln727_2_fu_234_p2;

assign zext_ln727_fu_292_p1 = dependency_predecessors_kernels_values1_load_reg_368;

assign zext_ln732_1_fu_252_p1 = tmp_s_fu_245_p3;

assign zext_ln732_2_fu_263_p1 = tmp_6_fu_256_p3;

assign zext_ln732_3_fu_231_p1 = select_ln724_reg_349;

assign zext_ln732_4_fu_273_p1 = select_ln724_reg_349_pp0_iter2_reg;

assign zext_ln732_5_fu_282_p1 = add_ln732_1_fu_276_p2;

assign zext_ln732_fu_197_p1 = select_ln724_1_reg_356;

endmodule //runOne_Reset_Pipeline_VITIS_LOOP_724_19_VITIS_LOOP_726_20
