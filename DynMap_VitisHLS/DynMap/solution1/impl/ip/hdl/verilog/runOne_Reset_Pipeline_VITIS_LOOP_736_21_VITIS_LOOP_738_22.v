// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runOne_Reset_Pipeline_VITIS_LOOP_736_21_VITIS_LOOP_738_22 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add_ln736,
        mul_ln727,
        dependency_successor_values_address0,
        dependency_successor_values_ce0,
        dependency_successor_values_we0,
        dependency_successor_values_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [10:0] add_ln736;
input  [9:0] mul_ln727;
output  [10:0] dependency_successor_values_address0;
output   dependency_successor_values_ce0;
output   dependency_successor_values_we0;
output  [7:0] dependency_successor_values_d0;

reg ap_idle;
reg dependency_successor_values_ce0;
reg dependency_successor_values_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln736_fu_134_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [13:0] dependency_successors_kernels_values1_address0;
reg    dependency_successors_kernels_values1_ce0;
wire   [6:0] dependency_successors_kernels_values1_q0;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] select_ln736_fu_164_p3;
reg   [4:0] select_ln736_reg_344;
reg   [4:0] select_ln736_reg_344_pp0_iter1_reg;
reg   [4:0] select_ln736_reg_344_pp0_iter2_reg;
wire   [5:0] select_ln736_1_fu_172_p3;
reg   [5:0] select_ln736_1_reg_351;
reg   [5:0] select_ln736_1_reg_351_pp0_iter1_reg;
reg   [5:0] select_ln736_1_reg_351_pp0_iter2_reg;
wire   [9:0] add_ln739_fu_184_p2;
reg   [9:0] add_ln739_reg_357;
reg   [6:0] dependency_successors_kernels_values1_load_reg_368;
wire   [63:0] zext_ln739_1_fu_244_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln744_5_fu_286_p1;
reg   [4:0] j_fu_66;
wire   [4:0] add_ln738_fu_190_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [5:0] i_fu_70;
reg   [5:0] ap_sig_allocacmp_i_load;
reg   [10:0] indvar_flatten61_fu_74;
wire   [10:0] add_ln736_1_fu_140_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten61_load;
wire   [0:0] icmp_ln738_fu_158_p2;
wire   [5:0] i_11_fu_152_p2;
wire   [9:0] zext_ln744_fu_180_p1;
wire   [11:0] tmp_fu_218_p3;
wire   [13:0] p_shl2_cast_fu_211_p3;
wire   [13:0] zext_ln739_fu_225_p1;
wire   [13:0] add_ln739_1_fu_229_p2;
wire   [13:0] zext_ln744_3_fu_235_p1;
wire   [13:0] add_ln739_2_fu_238_p2;
wire   [9:0] tmp_s_fu_249_p3;
wire   [7:0] tmp_5_fu_260_p3;
wire   [10:0] zext_ln744_1_fu_256_p1;
wire   [10:0] zext_ln744_2_fu_267_p1;
wire   [10:0] add_ln744_fu_271_p2;
wire   [10:0] zext_ln744_4_fu_277_p1;
wire   [10:0] add_ln744_1_fu_280_p2;
wire   [0:0] icmp_ln739_fu_291_p2;
wire   [0:0] icmp_ln739_1_fu_296_p2;
wire   [0:0] or_ln739_fu_301_p2;
wire   [6:0] select_ln739_fu_307_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

runOne_Reset_Pipeline_VITIS_LOOP_736_21_VITIS_LOOP_738_22_dependency_successors_kerncud #(
    .DataWidth( 7 ),
    .AddressRange( 12000 ),
    .AddressWidth( 14 ))
dependency_successors_kernels_values1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dependency_successors_kernels_values1_address0),
    .ce0(dependency_successors_kernels_values1_ce0),
    .q0(dependency_successors_kernels_values1_q0)
);

runOne_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln736_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_70 <= select_ln736_1_fu_172_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln736_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten61_fu_74 <= add_ln736_1_fu_140_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten61_fu_74 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln736_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_66 <= add_ln738_fu_190_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_66 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln736_fu_134_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln739_reg_357 <= add_ln739_fu_184_p2;
        select_ln736_1_reg_351 <= select_ln736_1_fu_172_p3;
        select_ln736_reg_344 <= select_ln736_fu_164_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln736_1_reg_351_pp0_iter1_reg <= select_ln736_1_reg_351;
        select_ln736_reg_344_pp0_iter1_reg <= select_ln736_reg_344;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        dependency_successors_kernels_values1_load_reg_368 <= dependency_successors_kernels_values1_q0;
        select_ln736_1_reg_351_pp0_iter2_reg <= select_ln736_1_reg_351_pp0_iter1_reg;
        select_ln736_reg_344_pp0_iter2_reg <= select_ln736_reg_344_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((icmp_ln736_fu_134_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten61_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten61_load = indvar_flatten61_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dependency_successor_values_ce0 = 1'b1;
    end else begin
        dependency_successor_values_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dependency_successor_values_we0 = 1'b1;
    end else begin
        dependency_successor_values_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dependency_successors_kernels_values1_ce0 = 1'b1;
    end else begin
        dependency_successors_kernels_values1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln736_1_fu_140_p2 = (ap_sig_allocacmp_indvar_flatten61_load + 11'd1);

assign add_ln738_fu_190_p2 = (select_ln736_fu_164_p3 + 5'd1);

assign add_ln739_1_fu_229_p2 = (p_shl2_cast_fu_211_p3 + zext_ln739_fu_225_p1);

assign add_ln739_2_fu_238_p2 = (add_ln739_1_fu_229_p2 + zext_ln744_3_fu_235_p1);

assign add_ln739_fu_184_p2 = (mul_ln727 + zext_ln744_fu_180_p1);

assign add_ln744_1_fu_280_p2 = (add_ln744_fu_271_p2 + zext_ln744_4_fu_277_p1);

assign add_ln744_fu_271_p2 = (zext_ln744_1_fu_256_p1 + zext_ln744_2_fu_267_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dependency_successor_values_address0 = zext_ln744_5_fu_286_p1;

assign dependency_successor_values_d0 = $signed(select_ln739_fu_307_p3);

assign dependency_successors_kernels_values1_address0 = zext_ln739_1_fu_244_p1;

assign i_11_fu_152_p2 = (ap_sig_allocacmp_i_load + 6'd1);

assign icmp_ln736_fu_134_p2 = ((ap_sig_allocacmp_indvar_flatten61_load == add_ln736) ? 1'b1 : 1'b0);

assign icmp_ln738_fu_158_p2 = ((ap_sig_allocacmp_j_load == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln739_1_fu_296_p2 = ((dependency_successors_kernels_values1_load_reg_368 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln739_fu_291_p2 = ((select_ln736_reg_344_pp0_iter2_reg == 5'd0) ? 1'b1 : 1'b0);

assign or_ln739_fu_301_p2 = (icmp_ln739_fu_291_p2 | icmp_ln739_1_fu_296_p2);

assign p_shl2_cast_fu_211_p3 = {{add_ln739_reg_357}, {4'd0}};

assign select_ln736_1_fu_172_p3 = ((icmp_ln738_fu_158_p2[0:0] == 1'b1) ? i_11_fu_152_p2 : ap_sig_allocacmp_i_load);

assign select_ln736_fu_164_p3 = ((icmp_ln738_fu_158_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign select_ln739_fu_307_p3 = ((or_ln739_fu_301_p2[0:0] == 1'b1) ? dependency_successors_kernels_values1_load_reg_368 : 7'd127);

assign tmp_5_fu_260_p3 = {{select_ln736_1_reg_351_pp0_iter2_reg}, {2'd0}};

assign tmp_fu_218_p3 = {{add_ln739_reg_357}, {2'd0}};

assign tmp_s_fu_249_p3 = {{select_ln736_1_reg_351_pp0_iter2_reg}, {4'd0}};

assign zext_ln739_1_fu_244_p1 = add_ln739_2_fu_238_p2;

assign zext_ln739_fu_225_p1 = tmp_fu_218_p3;

assign zext_ln744_1_fu_256_p1 = tmp_s_fu_249_p3;

assign zext_ln744_2_fu_267_p1 = tmp_5_fu_260_p3;

assign zext_ln744_3_fu_235_p1 = select_ln736_reg_344;

assign zext_ln744_4_fu_277_p1 = select_ln736_reg_344_pp0_iter2_reg;

assign zext_ln744_5_fu_286_p1 = add_ln744_1_fu_280_p2;

assign zext_ln744_fu_180_p1 = select_ln736_1_fu_172_p3;

endmodule //runOne_Reset_Pipeline_VITIS_LOOP_736_21_VITIS_LOOP_738_22
