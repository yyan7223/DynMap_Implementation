// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runOne_RoutingAvailability_CheckPredecessor_and_Placement_Pipeline_VITIS_LOOP_354_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        idxprom60,
        DynamicPlacement_II_load_2,
        upperLimit_1,
        add_ln356_out,
        add_ln356_out_ap_vld,
        IDX_pd_load_1_out,
        IDX_pd_load_1_out_ap_vld,
        IDX_pd_modulo_i,
        IDX_pd_modulo_o,
        IDX_pd_modulo_o_ap_vld,
        placement_dynamic_occupy_address0,
        placement_dynamic_occupy_ce0,
        placement_dynamic_occupy_q0,
        IDX_pd_i,
        IDX_pd_o,
        IDX_pd_o_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_pp0_stage0 = 15'd2;
parameter    ap_ST_fsm_pp0_stage1 = 15'd4;
parameter    ap_ST_fsm_pp0_stage2 = 15'd8;
parameter    ap_ST_fsm_pp0_stage3 = 15'd16;
parameter    ap_ST_fsm_pp0_stage4 = 15'd32;
parameter    ap_ST_fsm_pp0_stage5 = 15'd64;
parameter    ap_ST_fsm_pp0_stage6 = 15'd128;
parameter    ap_ST_fsm_pp0_stage7 = 15'd256;
parameter    ap_ST_fsm_pp0_stage8 = 15'd512;
parameter    ap_ST_fsm_pp0_stage9 = 15'd1024;
parameter    ap_ST_fsm_pp0_stage10 = 15'd2048;
parameter    ap_ST_fsm_pp0_stage11 = 15'd4096;
parameter    ap_ST_fsm_state15 = 15'd8192;
parameter    ap_ST_fsm_state16 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] idxprom60;
input  [7:0] DynamicPlacement_II_load_2;
input  [7:0] upperLimit_1;
output  [10:0] add_ln356_out;
output   add_ln356_out_ap_vld;
output  [7:0] IDX_pd_load_1_out;
output   IDX_pd_load_1_out_ap_vld;
input  [6:0] IDX_pd_modulo_i;
output  [6:0] IDX_pd_modulo_o;
output   IDX_pd_modulo_o_ap_vld;
output  [10:0] placement_dynamic_occupy_address0;
output   placement_dynamic_occupy_ce0;
input  [0:0] placement_dynamic_occupy_q0;
input  [7:0] IDX_pd_i;
output  [7:0] IDX_pd_o;
output   IDX_pd_o_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg add_ln356_out_ap_vld;
reg IDX_pd_load_1_out_ap_vld;
reg[6:0] IDX_pd_modulo_o;
reg IDX_pd_modulo_o_ap_vld;
reg placement_dynamic_occupy_ce0;
reg[7:0] IDX_pd_o;
reg IDX_pd_o_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [10:0] idxprom60_cast_fu_107_p1;
reg  signed [10:0] idxprom60_cast_reg_179;
wire   [10:0] add_ln356_fu_123_p2;
reg   [10:0] add_ln356_reg_184;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] placement_dynamic_occupy_load_reg_194;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] IDX_pd_load_reg_198;
wire   [7:0] add_ln361_fu_137_p2;
wire   [0:0] icmp_ln363_fu_154_p2;
reg   [0:0] icmp_ln363_reg_208;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state13_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_subdone;
reg    ap_predicate_tran14to15_state13;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_99_p4;
reg   [0:0] UnifiedRetVal_reg_95;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln356_fu_128_p1;
wire    ap_block_pp0_stage0;
wire   [6:0] trunc_ln362_fu_159_p1;
reg   [6:0] ap_sig_allocacmp_IDX_pd_modulo_load;
wire    ap_block_pp0_stage1;
wire   [10:0] tmp_s_fu_115_p3;
wire   [6:0] grp_fu_149_p2;
reg   [0:0] ap_return_preg;
reg   [14:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg   [1:0] ap_exit_tran_regpp0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_state11_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_state12_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 1'd0;
end

runOne_srem_8ns_8ns_7_12_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 7 ))
srem_8ns_8ns_7_12_1_U249(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln361_fu_137_p2),
    .din1(DynamicPlacement_II_load_2),
    .ce(1'b1),
    .dout(grp_fu_149_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage11_subdone) & (1'b1 == ap_CS_fsm_pp0_stage11)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_99_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((placement_dynamic_occupy_load_reg_194 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        UnifiedRetVal_reg_95 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        UnifiedRetVal_reg_95 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if ((placement_dynamic_occupy_load_reg_194 == 1'd0)) begin
                        ap_exit_tran_regpp0[0] <= 1'b1;
        end else if ((ap_predicate_tran14to15_state13 == 1'b1)) begin
                        ap_exit_tran_regpp0[0] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        IDX_pd_load_reg_198 <= IDX_pd_i;
        placement_dynamic_occupy_load_reg_194 <= placement_dynamic_occupy_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln356_reg_184 <= add_ln356_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (placement_dynamic_occupy_q0 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln363_reg_208 <= icmp_ln363_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        idxprom60_cast_reg_179 <= idxprom60_cast_fu_107_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((placement_dynamic_occupy_load_reg_194 == 1'd1) & (1'b1 == ap_CS_fsm_state15)))) begin
        IDX_pd_load_1_out_ap_vld = 1'b1;
    end else begin
        IDX_pd_load_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((placement_dynamic_occupy_load_reg_194 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        IDX_pd_modulo_o = trunc_ln362_fu_159_p1;
    end else begin
        IDX_pd_modulo_o = IDX_pd_modulo_i;
    end
end

always @ (*) begin
    if (((placement_dynamic_occupy_load_reg_194 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        IDX_pd_modulo_o_ap_vld = 1'b1;
    end else begin
        IDX_pd_modulo_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (placement_dynamic_occupy_q0 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        IDX_pd_o = add_ln361_fu_137_p2;
    end else begin
        IDX_pd_o = IDX_pd_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (placement_dynamic_occupy_q0 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        IDX_pd_o_ap_vld = 1'b1;
    end else begin
        IDX_pd_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((placement_dynamic_occupy_load_reg_194 == 1'd1) & (1'b1 == ap_CS_fsm_state15)))) begin
        add_ln356_out_ap_vld = 1'b1;
    end else begin
        add_ln356_out_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage11_subdone) & (1'b1 == ap_CS_fsm_pp0_stage11) & ((placement_dynamic_occupy_load_reg_194 == 1'd0) | (ap_predicate_tran14to15_state13 == 1'b1)))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((placement_dynamic_occupy_load_reg_194 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_99_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_99_p4 = UnifiedRetVal_reg_95;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_99_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((placement_dynamic_occupy_load_reg_194 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_sig_allocacmp_IDX_pd_modulo_load = trunc_ln362_fu_159_p1;
    end else begin
        ap_sig_allocacmp_IDX_pd_modulo_load = IDX_pd_modulo_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        placement_dynamic_occupy_ce0 = 1'b1;
    end else begin
        placement_dynamic_occupy_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_exit_tran_regpp0 == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IDX_pd_load_1_out = IDX_pd_load_reg_198;

assign add_ln356_fu_123_p2 = ($signed(tmp_s_fu_115_p3) + $signed(idxprom60_cast_reg_179));

assign add_ln356_out = add_ln356_reg_184;

assign add_ln361_fu_137_p2 = (IDX_pd_i + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran14to15_state13 = ((placement_dynamic_occupy_load_reg_194 == 1'd1) & (icmp_ln363_reg_208 == 1'd1));
end

assign icmp_ln363_fu_154_p2 = ((add_ln361_fu_137_p2 == upperLimit_1) ? 1'b1 : 1'b0);

assign idxprom60_cast_fu_107_p1 = $signed(idxprom60);

assign placement_dynamic_occupy_address0 = zext_ln356_fu_128_p1;

assign tmp_s_fu_115_p3 = {{ap_sig_allocacmp_IDX_pd_modulo_load}, {4'd0}};

assign trunc_ln362_fu_159_p1 = grp_fu_149_p2[6:0];

assign zext_ln356_fu_128_p1 = add_ln356_fu_123_p2;

always @ (posedge ap_clk) begin
    ap_exit_tran_regpp0[1] <= 1'b0;
end

endmodule //runOne_RoutingAvailability_CheckPredecessor_and_Placement_Pipeline_VITIS_LOOP_354_4
