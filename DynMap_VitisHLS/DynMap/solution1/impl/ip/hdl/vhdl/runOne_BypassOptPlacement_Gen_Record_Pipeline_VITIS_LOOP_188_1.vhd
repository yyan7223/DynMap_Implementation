-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_188_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bypassSrcOpt_load : IN STD_LOGIC_VECTOR (7 downto 0);
    bypassSrcOptIdx_out : OUT STD_LOGIC_VECTOR (6 downto 0);
    bypassSrcOptIdx_out_ap_vld : OUT STD_LOGIC;
    placement_dynamic_dict_Opt2PC_keys_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    placement_dynamic_dict_Opt2PC_keys_ce0 : OUT STD_LOGIC;
    placement_dynamic_dict_Opt2PC_keys_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_188_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bypassSrcOptIdx_1_reg_117 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln188_fu_79_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln188_reg_122 : STD_LOGIC_VECTOR (0 downto 0);
    signal bypassSrcOptIdx_2_fu_85_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal bypassSrcOptIdx_2_reg_126 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln189_cast_fu_91_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bypassSrcOptIdx_fu_40 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln189_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bypassSrcOptIdx_fu_40_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                bypassSrcOptIdx_fu_40 <= ap_const_lv7_0;
            elsif (((icmp_ln189_fu_96_p2 = ap_const_lv1_0) and (icmp_ln188_reg_122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                bypassSrcOptIdx_fu_40 <= bypassSrcOptIdx_2_reg_126;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bypassSrcOptIdx_1_reg_117 <= bypassSrcOptIdx_fu_40;
                bypassSrcOptIdx_2_reg_126 <= bypassSrcOptIdx_2_fu_85_p2;
                icmp_ln188_reg_122 <= icmp_ln188_fu_79_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln188_reg_122, ap_CS_fsm_state3, icmp_ln189_fu_96_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln189_fu_96_p2 = ap_const_lv1_0) and (icmp_ln188_reg_122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln188_reg_122 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bypassSrcOptIdx_2_fu_85_p2 <= std_logic_vector(unsigned(bypassSrcOptIdx_fu_40) + unsigned(ap_const_lv7_1));

    bypassSrcOptIdx_out_assign_proc : process(bypassSrcOptIdx_1_reg_117, icmp_ln188_reg_122, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bypassSrcOptIdx_out <= ap_const_lv7_64;
        elsif (((icmp_ln188_reg_122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bypassSrcOptIdx_out <= bypassSrcOptIdx_1_reg_117;
        else 
            bypassSrcOptIdx_out <= "XXXXXXX";
        end if; 
    end process;


    bypassSrcOptIdx_out_ap_vld_assign_proc : process(icmp_ln188_reg_122, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln188_reg_122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            bypassSrcOptIdx_out_ap_vld <= ap_const_logic_1;
        else 
            bypassSrcOptIdx_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln188_fu_79_p2 <= "1" when (unsigned(bypassSrcOptIdx_fu_40) < unsigned(ap_const_lv7_64)) else "0";
    icmp_ln189_fu_96_p2 <= "1" when (placement_dynamic_dict_Opt2PC_keys_q0 = bypassSrcOpt_load) else "0";
    placement_dynamic_dict_Opt2PC_keys_address0 <= trunc_ln189_cast_fu_91_p1(7 - 1 downto 0);

    placement_dynamic_dict_Opt2PC_keys_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            placement_dynamic_dict_Opt2PC_keys_ce0 <= ap_const_logic_1;
        else 
            placement_dynamic_dict_Opt2PC_keys_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln189_cast_fu_91_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bypassSrcOptIdx_fu_40),64));
end behav;
