-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_199_2_VITIS_LOOP_233_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Tile2XY_0_load : IN STD_LOGIC_VECTOR (1 downto 0);
    cmp28 : IN STD_LOGIC_VECTOR (0 downto 0);
    and_ln205 : IN STD_LOGIC_VECTOR (0 downto 0);
    Tile2XY_1_load : IN STD_LOGIC_VECTOR (1 downto 0);
    cmp77 : IN STD_LOGIC_VECTOR (0 downto 0);
    and_ln218 : IN STD_LOGIC_VECTOR (0 downto 0);
    sub_ln192 : IN STD_LOGIC_VECTOR (5 downto 0);
    CGRA_NumTiles_shapes_values_load : IN STD_LOGIC_VECTOR (3 downto 0);
    shape_idx_load : IN STD_LOGIC_VECTOR (4 downto 0);
    yDiff_2_phi_out : OUT STD_LOGIC_VECTOR (1 downto 0);
    yDiff_2_phi_out_ap_vld : OUT STD_LOGIC;
    xDiff_2_phi_out : OUT STD_LOGIC_VECTOR (1 downto 0);
    xDiff_2_phi_out_ap_vld : OUT STD_LOGIC;
    i_50_out : OUT STD_LOGIC_VECTOR (3 downto 0);
    i_50_out_ap_vld : OUT STD_LOGIC;
    xDiff_2_out : OUT STD_LOGIC_VECTOR (1 downto 0);
    xDiff_2_out_ap_vld : OUT STD_LOGIC;
    yDiff_2_out : OUT STD_LOGIC_VECTOR (1 downto 0);
    yDiff_2_out_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_199_2_VITIS_LOOP_233_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bpsStride_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal bpsStride_0_ce0 : STD_LOGIC;
    signal bpsStride_0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal bpsStride_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal bpsStride_1_ce0 : STD_LOGIC;
    signal bpsStride_1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal xy2Tile_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xy2Tile_ce0 : STD_LOGIC;
    signal xy2Tile_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal allocated_tiles_shapes_values_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal allocated_tiles_shapes_values_ce0 : STD_LOGIC;
    signal allocated_tiles_shapes_values_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_49_reg_687 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvar_flatten_load_reg_693 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln199_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln199_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_48_load_1_reg_712 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln233_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln199_fu_328_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln199_reg_725 : STD_LOGIC_VECTOR (3 downto 0);
    signal xDiff_reg_735 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal yDiff_reg_741 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln199_2_fu_359_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln199_2_reg_757 : STD_LOGIC_VECTOR (1 downto 0);
    signal allocated_tiles_shapes_values_load_reg_762 : STD_LOGIC_VECTOR (3 downto 0);
    signal xDiff_2_fu_387_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xDiff_2_reg_767 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal yDiff_2_fu_421_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal yDiff_2_reg_773 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln199_1_fu_467_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln199_1_reg_779 : STD_LOGIC_VECTOR (5 downto 0);
    signal xDiff_2_phi_load_1_reg_789 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal yDiff_2_phi_load_1_reg_794 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_UnifiedRetVal_phi_fu_271_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal UnifiedRetVal_reg_267 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln199_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln234_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_1_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_2_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_48_fu_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_50_fu_563_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln234_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xDiff_2_phi_fu_94 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln199_4_fu_552_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal yDiff_2_phi_fu_98 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln199_3_fu_546_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_fu_102 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_106 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_27_fu_336_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln199_fu_348_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln202_fu_365_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln197_fu_373_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xDiff_1_fu_380_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln215_fu_399_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln197_1_fu_407_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal yDiff_1_fu_414_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_226_fu_428_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal y_2_fu_402_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_227_fu_433_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_fu_394_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_2_fu_368_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_228_fu_446_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln205_fu_453_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal y_fu_440_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xDiff_cast_mid1_fu_472_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal yDiff_cast_mid1_fu_486_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_mid112_fu_495_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal y_2_mid1_fu_490_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_mid114_fu_500_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_mid1_fu_481_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_2_mid1_fu_476_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_229_fu_513_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln205_1_fu_520_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln218_fu_507_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_459_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_526_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln199_1_fu_534_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_199_2_VITIS_LOOP_233_3_bpsSlbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_199_2_VITIS_LOOP_233_3_bpsSmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_199_2_VITIS_LOOP_233_3_xy2Tncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component runOne_CurOptPotentialPlacement_List_BypassLess_Gen_Pipeline_VITIS_LOOP_453_4_allocaeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    bpsStride_0_U : component runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_199_2_VITIS_LOOP_233_3_bpsSlbW
    generic map (
        DataWidth => 1,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bpsStride_0_address0,
        ce0 => bpsStride_0_ce0,
        q0 => bpsStride_0_q0);

    bpsStride_1_U : component runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_199_2_VITIS_LOOP_233_3_bpsSmb6
    generic map (
        DataWidth => 1,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bpsStride_1_address0,
        ce0 => bpsStride_1_ce0,
        q0 => bpsStride_1_q0);

    xy2Tile_U : component runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_199_2_VITIS_LOOP_233_3_xy2Tncg
    generic map (
        DataWidth => 4,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xy2Tile_address0,
        ce0 => xy2Tile_ce0,
        q0 => xy2Tile_q0);

    allocated_tiles_shapes_values_U : component runOne_CurOptPotentialPlacement_List_BypassLess_Gen_Pipeline_VITIS_LOOP_453_4_allocaeOg
    generic map (
        DataWidth => 4,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => allocated_tiles_shapes_values_address0,
        ce0 => allocated_tiles_shapes_values_ce0,
        q0 => allocated_tiles_shapes_values_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_271_p4;
                end if; 
            end if;
        end if;
    end process;


    UnifiedRetVal_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln199_reg_708 = ap_const_lv1_0))) then 
                UnifiedRetVal_reg_267 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                UnifiedRetVal_reg_267 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i_48_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_48_fu_90 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln234_fu_558_p2 = ap_const_lv1_0) and (icmp_ln199_reg_708 = ap_const_lv1_0))) then 
                i_48_fu_90 <= i_50_fu_563_p2;
            end if; 
        end if;
    end process;

    i_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_102 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln234_fu_558_p2 = ap_const_lv1_0) and (icmp_ln199_reg_708 = ap_const_lv1_0))) then 
                i_fu_102 <= select_ln199_2_reg_757;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_fu_106 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln234_fu_558_p2 = ap_const_lv1_0) and (icmp_ln199_reg_708 = ap_const_lv1_0))) then 
                indvar_flatten_fu_106 <= add_ln199_1_reg_779;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln199_1_reg_779 <= add_ln199_1_fu_467_p2;
                xDiff_2_reg_767 <= xDiff_2_fu_387_p3;
                yDiff_2_reg_773 <= yDiff_2_fu_421_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln199_reg_708 = ap_const_lv1_0))) then
                allocated_tiles_shapes_values_load_reg_762 <= allocated_tiles_shapes_values_q0;
                select_ln199_2_reg_757 <= select_ln199_2_fu_359_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln199_fu_318_p2 = ap_const_lv1_0))) then
                i_48_load_1_reg_712 <= i_48_fu_90;
                icmp_ln233_reg_717 <= icmp_ln233_fu_323_p2;
                select_ln199_reg_725 <= select_ln199_fu_328_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_49_reg_687 <= i_fu_102;
                icmp_ln199_reg_708 <= icmp_ln199_fu_318_p2;
                indvar_flatten_load_reg_693 <= indvar_flatten_fu_106;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln234_fu_558_p2 = ap_const_lv1_0) and (icmp_ln199_reg_708 = ap_const_lv1_0))) then
                xDiff_2_phi_fu_94 <= select_ln199_4_fu_552_p3;
                yDiff_2_phi_fu_98 <= select_ln199_3_fu_546_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln199_reg_708 = ap_const_lv1_0))) then
                xDiff_2_phi_load_1_reg_789 <= xDiff_2_phi_fu_94;
                yDiff_2_phi_load_1_reg_794 <= yDiff_2_phi_fu_98;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                xDiff_reg_735 <= bpsStride_0_q0;
                yDiff_reg_741 <= bpsStride_1_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln199_reg_708, ap_CS_fsm_state5, icmp_ln234_fu_558_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln234_fu_558_p2 = ap_const_lv1_0) and (icmp_ln199_reg_708 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln199_reg_708 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln199_1_fu_467_p2 <= std_logic_vector(unsigned(indvar_flatten_load_reg_693) + unsigned(ap_const_lv6_1));
    add_ln199_fu_348_p2 <= std_logic_vector(unsigned(i_49_reg_687) + unsigned(ap_const_lv2_1));
    allocated_tiles_shapes_values_address0 <= zext_ln234_fu_343_p1(9 - 1 downto 0);

    allocated_tiles_shapes_values_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            allocated_tiles_shapes_values_ce0 <= ap_const_logic_1;
        else 
            allocated_tiles_shapes_values_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_UnifiedRetVal_phi_fu_271_p4_assign_proc : process(icmp_ln199_reg_708, UnifiedRetVal_reg_267, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln199_reg_708 = ap_const_lv1_0))) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_271_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_271_p4 <= UnifiedRetVal_reg_267;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_UnifiedRetVal_phi_fu_271_p4, ap_CS_fsm_state6, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_271_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    bpsStride_0_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln199_fu_312_p1, zext_ln199_1_fu_353_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bpsStride_0_address0 <= zext_ln199_1_fu_353_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bpsStride_0_address0 <= zext_ln199_fu_312_p1(2 - 1 downto 0);
        else 
            bpsStride_0_address0 <= "XX";
        end if; 
    end process;


    bpsStride_0_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bpsStride_0_ce0 <= ap_const_logic_1;
        else 
            bpsStride_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bpsStride_1_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln199_fu_312_p1, zext_ln199_1_fu_353_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bpsStride_1_address0 <= zext_ln199_1_fu_353_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bpsStride_1_address0 <= zext_ln199_fu_312_p1(2 - 1 downto 0);
        else 
            bpsStride_1_address0 <= "XX";
        end if; 
    end process;


    bpsStride_1_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bpsStride_1_ce0 <= ap_const_logic_1;
        else 
            bpsStride_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_226_fu_428_p2 <= std_logic_vector(unsigned(zext_ln215_fu_399_p1) + unsigned(Tile2XY_1_load));
    empty_227_fu_433_p3 <= 
        empty_226_fu_428_p2 when (cmp77(0) = '1') else 
        y_2_fu_402_p2;
    empty_228_fu_446_p3 <= 
        empty_fu_394_p2 when (cmp28(0) = '1') else 
        x_2_fu_368_p2;
    empty_229_fu_513_p3 <= 
        p_mid1_fu_481_p2 when (cmp28(0) = '1') else 
        x_2_mid1_fu_476_p2;
    empty_fu_394_p2 <= std_logic_vector(unsigned(zext_ln202_fu_365_p1) + unsigned(Tile2XY_0_load));
    i_50_fu_563_p2 <= std_logic_vector(unsigned(select_ln199_reg_725) + unsigned(ap_const_lv4_1));

    i_50_out_assign_proc : process(icmp_ln199_reg_708, i_48_load_1_reg_712, ap_CS_fsm_state7, ap_CS_fsm_state6, i_48_fu_90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            i_50_out <= i_48_fu_90;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln199_reg_708 = ap_const_lv1_0))) then 
            i_50_out <= i_48_load_1_reg_712;
        else 
            i_50_out <= "XXXX";
        end if; 
    end process;


    i_50_out_ap_vld_assign_proc : process(icmp_ln199_reg_708, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln199_reg_708 = ap_const_lv1_0)))) then 
            i_50_out_ap_vld <= ap_const_logic_1;
        else 
            i_50_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln199_fu_318_p2 <= "1" when (indvar_flatten_fu_106 = sub_ln192) else "0";
    icmp_ln233_fu_323_p2 <= "1" when (unsigned(i_48_fu_90) < unsigned(CGRA_NumTiles_shapes_values_load)) else "0";
    icmp_ln234_fu_558_p2 <= "1" when (allocated_tiles_shapes_values_load_reg_762 = xy2Tile_q0) else "0";
    p_mid112_fu_495_p2 <= std_logic_vector(unsigned(yDiff_cast_mid1_fu_486_p1) + unsigned(Tile2XY_1_load));
    p_mid114_fu_500_p3 <= 
        p_mid112_fu_495_p2 when (cmp77(0) = '1') else 
        y_2_mid1_fu_490_p2;
    p_mid1_fu_481_p2 <= std_logic_vector(unsigned(xDiff_cast_mid1_fu_472_p1) + unsigned(Tile2XY_0_load));
    select_ln197_1_fu_407_p3 <= 
        ap_const_lv2_3 when (yDiff_reg_741(0) = '1') else 
        ap_const_lv2_0;
    select_ln197_fu_373_p3 <= 
        ap_const_lv2_3 when (xDiff_reg_735(0) = '1') else 
        ap_const_lv2_0;
    select_ln199_1_fu_534_p3 <= 
        tmp_fu_459_p3 when (icmp_ln233_reg_717(0) = '1') else 
        tmp_s_fu_526_p3;
    select_ln199_2_fu_359_p3 <= 
        i_49_reg_687 when (icmp_ln233_reg_717(0) = '1') else 
        add_ln199_fu_348_p2;
    select_ln199_3_fu_546_p3 <= 
        yDiff_2_phi_fu_98 when (icmp_ln233_reg_717(0) = '1') else 
        yDiff_2_reg_773;
    select_ln199_4_fu_552_p3 <= 
        xDiff_2_phi_fu_94 when (icmp_ln233_reg_717(0) = '1') else 
        xDiff_2_reg_767;
    select_ln199_fu_328_p3 <= 
        i_48_fu_90 when (icmp_ln233_fu_323_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln205_1_fu_520_p3 <= 
        Tile2XY_0_load when (and_ln205(0) = '1') else 
        empty_229_fu_513_p3;
    select_ln205_fu_453_p3 <= 
        Tile2XY_0_load when (and_ln205(0) = '1') else 
        empty_228_fu_446_p3;
    select_ln218_fu_507_p3 <= 
        Tile2XY_1_load when (and_ln218(0) = '1') else 
        p_mid114_fu_500_p3;
    tmp_27_fu_336_p3 <= (shape_idx_load & select_ln199_fu_328_p3);
    tmp_fu_459_p3 <= (select_ln205_fu_453_p3 & y_fu_440_p3);
    tmp_s_fu_526_p3 <= (select_ln205_1_fu_520_p3 & select_ln218_fu_507_p3);
    xDiff_1_fu_380_p3 <= 
        zext_ln202_fu_365_p1 when (cmp28(0) = '1') else 
        select_ln197_fu_373_p3;
    xDiff_2_fu_387_p3 <= 
        ap_const_lv2_0 when (and_ln205(0) = '1') else 
        xDiff_1_fu_380_p3;
    xDiff_2_out <= xDiff_2_reg_767;

    xDiff_2_out_ap_vld_assign_proc : process(icmp_ln199_reg_708, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln199_reg_708 = ap_const_lv1_0)))) then 
            xDiff_2_out_ap_vld <= ap_const_logic_1;
        else 
            xDiff_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    xDiff_2_phi_out_assign_proc : process(icmp_ln199_reg_708, xDiff_2_phi_load_1_reg_789, ap_CS_fsm_state7, ap_CS_fsm_state6, xDiff_2_phi_fu_94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            xDiff_2_phi_out <= xDiff_2_phi_fu_94;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln199_reg_708 = ap_const_lv1_0))) then 
            xDiff_2_phi_out <= xDiff_2_phi_load_1_reg_789;
        else 
            xDiff_2_phi_out <= "XX";
        end if; 
    end process;


    xDiff_2_phi_out_ap_vld_assign_proc : process(icmp_ln199_reg_708, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln199_reg_708 = ap_const_lv1_0)))) then 
            xDiff_2_phi_out_ap_vld <= ap_const_logic_1;
        else 
            xDiff_2_phi_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xDiff_cast_mid1_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bpsStride_0_q0),2));
    x_2_fu_368_p2 <= std_logic_vector(unsigned(Tile2XY_0_load) - unsigned(zext_ln202_fu_365_p1));
    x_2_mid1_fu_476_p2 <= std_logic_vector(unsigned(Tile2XY_0_load) - unsigned(xDiff_cast_mid1_fu_472_p1));
    xy2Tile_address0 <= zext_ln199_2_fu_541_p1(4 - 1 downto 0);

    xy2Tile_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            xy2Tile_ce0 <= ap_const_logic_1;
        else 
            xy2Tile_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    yDiff_1_fu_414_p3 <= 
        zext_ln215_fu_399_p1 when (cmp77(0) = '1') else 
        select_ln197_1_fu_407_p3;
    yDiff_2_fu_421_p3 <= 
        ap_const_lv2_0 when (and_ln218(0) = '1') else 
        yDiff_1_fu_414_p3;
    yDiff_2_out <= yDiff_2_reg_773;

    yDiff_2_out_ap_vld_assign_proc : process(icmp_ln199_reg_708, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln199_reg_708 = ap_const_lv1_0)))) then 
            yDiff_2_out_ap_vld <= ap_const_logic_1;
        else 
            yDiff_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    yDiff_2_phi_out_assign_proc : process(icmp_ln199_reg_708, yDiff_2_phi_load_1_reg_794, ap_CS_fsm_state7, ap_CS_fsm_state6, yDiff_2_phi_fu_98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            yDiff_2_phi_out <= yDiff_2_phi_fu_98;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln199_reg_708 = ap_const_lv1_0))) then 
            yDiff_2_phi_out <= yDiff_2_phi_load_1_reg_794;
        else 
            yDiff_2_phi_out <= "XX";
        end if; 
    end process;


    yDiff_2_phi_out_ap_vld_assign_proc : process(icmp_ln199_reg_708, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln199_reg_708 = ap_const_lv1_0)))) then 
            yDiff_2_phi_out_ap_vld <= ap_const_logic_1;
        else 
            yDiff_2_phi_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    yDiff_cast_mid1_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bpsStride_1_q0),2));
    y_2_fu_402_p2 <= std_logic_vector(unsigned(Tile2XY_1_load) - unsigned(zext_ln215_fu_399_p1));
    y_2_mid1_fu_490_p2 <= std_logic_vector(unsigned(Tile2XY_1_load) - unsigned(yDiff_cast_mid1_fu_486_p1));
    y_fu_440_p3 <= 
        Tile2XY_1_load when (and_ln218(0) = '1') else 
        empty_227_fu_433_p3;
    zext_ln199_1_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln199_fu_348_p2),64));
    zext_ln199_2_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln199_1_fu_534_p3),64));
    zext_ln199_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_102),64));
    zext_ln202_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xDiff_reg_735),2));
    zext_ln215_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(yDiff_reg_741),2));
    zext_ln234_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_336_p3),64));
end behav;
