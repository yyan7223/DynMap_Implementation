-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_249_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    add_ln192 : IN STD_LOGIC_VECTOR (7 downto 0);
    DynamicPlacement_II_load : IN STD_LOGIC_VECTOR (7 downto 0);
    tileId : IN STD_LOGIC_VECTOR (3 downto 0);
    idxprom174 : IN STD_LOGIC_VECTOR (3 downto 0);
    idxprom20 : IN STD_LOGIC_VECTOR (4 downto 0);
    sub182 : IN STD_LOGIC_VECTOR (3 downto 0);
    upperLimit : IN STD_LOGIC_VECTOR (7 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    add_ln252_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    add_ln252_out_ap_vld : OUT STD_LOGIC;
    tmp_71_out : OUT STD_LOGIC_VECTOR (14 downto 0);
    tmp_71_out_ap_vld : OUT STD_LOGIC;
    placement_dynamic_bypass_occupy_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    placement_dynamic_bypass_occupy_ce0 : OUT STD_LOGIC;
    placement_dynamic_bypass_occupy_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    placement_dynamic_bypass_occupy_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    placement_dynamic_bypass_occupy_ce1 : OUT STD_LOGIC;
    placement_dynamic_bypass_occupy_q1 : IN STD_LOGIC_VECTOR (0 downto 0);
    IDX_pd_bypass_i : IN STD_LOGIC_VECTOR (7 downto 0);
    IDX_pd_bypass_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    IDX_pd_bypass_o_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_249_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal icmp_ln282_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln254_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage13 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal idxprom20_cast_fu_173_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal idxprom20_cast_reg_340 : STD_LOGIC_VECTOR (12 downto 0);
    signal idxprom174_cast_fu_177_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal idxprom174_cast_reg_345 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_load_reg_350 : STD_LOGIC_VECTOR (7 downto 0);
    signal formerPC_fu_216_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal formerPC_reg_356 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal add_ln252_fu_231_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln252_reg_361 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal trunc_ln253_fu_256_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln253_reg_372 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_UnifiedRetVal_phi_fu_165_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln252_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln253_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln280_fu_289_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_70 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_p_load : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_189_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln251_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln251_fu_201_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln251_1_fu_204_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln251_fu_208_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_68_cast_fu_222_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_240_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln253_fu_247_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln253_fu_251_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_260_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component runOne_srem_8ns_8ns_8_12_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component runOne_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    srem_8ns_8ns_8_12_1_U167 : component runOne_srem_8ns_8ns_8_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_p_load,
        din1 => DynamicPlacement_II_load,
        ce => ap_const_logic_1,
        dout => grp_fu_189_p2);

    flow_control_loop_pipe_sequential_init_U : component runOne_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage13,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((or_ln254_fu_279_p2 = ap_const_lv1_0) or (icmp_ln282_fu_301_p2 = ap_const_lv1_1)))) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_165_p4;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                empty_fu_70 <= add_ln192;
            elsif (((or_ln254_fu_279_p2 = ap_const_lv1_1) and (icmp_ln282_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                empty_fu_70 <= add_ln280_fu_289_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln252_reg_361 <= add_ln252_fu_231_p2;
                formerPC_reg_356 <= formerPC_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                idxprom174_cast_reg_345 <= idxprom174_cast_fu_177_p1;
                idxprom20_cast_reg_340 <= idxprom20_cast_fu_173_p1;
                p_load_reg_350 <= ap_sig_allocacmp_p_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                trunc_ln253_reg_372 <= trunc_ln253_fu_256_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state14, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    IDX_pd_bypass_o_assign_proc : process(ap_CS_fsm_state14, or_ln254_fu_279_p2, IDX_pd_bypass_i, add_ln280_fu_289_p2)
    begin
        if (((or_ln254_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            IDX_pd_bypass_o <= add_ln280_fu_289_p2;
        else 
            IDX_pd_bypass_o <= IDX_pd_bypass_i;
        end if; 
    end process;


    IDX_pd_bypass_o_ap_vld_assign_proc : process(ap_CS_fsm_state14, or_ln254_fu_279_p2)
    begin
        if (((or_ln254_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            IDX_pd_bypass_o_ap_vld <= ap_const_logic_1;
        else 
            IDX_pd_bypass_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln252_fu_231_p2 <= std_logic_vector(unsigned(tmp_68_cast_fu_222_p4) + unsigned(idxprom174_cast_reg_345));
    add_ln252_out <= add_ln252_reg_361;

    add_ln252_out_ap_vld_assign_proc : process(ap_CS_fsm_state14, icmp_ln282_fu_301_p2, or_ln254_fu_279_p2)
    begin
        if ((((or_ln254_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((or_ln254_fu_279_p2 = ap_const_lv1_1) and (icmp_ln282_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            add_ln252_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln252_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln253_fu_251_p2 <= std_logic_vector(unsigned(zext_ln253_fu_247_p1) + unsigned(idxprom20_cast_reg_340));
    add_ln280_fu_289_p2 <= std_logic_vector(unsigned(IDX_pd_bypass_i) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage13_assign_proc : process(ap_CS_fsm_state14, icmp_ln282_fu_301_p2, or_ln254_fu_279_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((or_ln254_fu_279_p2 = ap_const_lv1_0) or (icmp_ln282_fu_301_p2 = ap_const_lv1_1)))) then 
            ap_condition_exit_pp0_iter0_stage13 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state14, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage13;

    ap_phi_mux_UnifiedRetVal_phi_fu_165_p4_assign_proc : process(ap_CS_fsm_state14, icmp_ln282_fu_301_p2, or_ln254_fu_279_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
            if (((or_ln254_fu_279_p2 = ap_const_lv1_1) and (icmp_ln282_fu_301_p2 = ap_const_lv1_1))) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_165_p4 <= ap_const_lv1_0;
            elsif ((or_ln254_fu_279_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_165_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_UnifiedRetVal_phi_fu_165_p4 <= "X";
            end if;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_165_p4 <= "X";
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state14, icmp_ln282_fu_301_p2, or_ln254_fu_279_p2, ap_phi_mux_UnifiedRetVal_phi_fu_165_p4, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((or_ln254_fu_279_p2 = ap_const_lv1_0) or (icmp_ln282_fu_301_p2 = ap_const_lv1_1)))) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_165_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_allocacmp_p_load_assign_proc : process(ap_CS_fsm_state1, add_ln192, empty_fu_70, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_p_load <= add_ln192;
        else 
            ap_sig_allocacmp_p_load <= empty_fu_70;
        end if; 
    end process;

    formerPC_fu_216_p2 <= std_logic_vector(unsigned(select_ln251_fu_208_p3) + unsigned(ap_const_lv7_7F));
    icmp_ln251_fu_195_p2 <= "1" when (grp_fu_189_p2 = ap_const_lv8_0) else "0";
    icmp_ln282_fu_301_p2 <= "1" when (add_ln280_fu_289_p2 = upperLimit) else "0";
        idxprom174_cast_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(idxprom174),15));

        idxprom20_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(idxprom20),13));

    or_ln254_fu_279_p2 <= (placement_dynamic_bypass_occupy_q1 or placement_dynamic_bypass_occupy_q0);
    p_out <= p_load_reg_350;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_state14, icmp_ln282_fu_301_p2, or_ln254_fu_279_p2)
    begin
        if ((((or_ln254_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((or_ln254_fu_279_p2 = ap_const_lv1_1) and (icmp_ln282_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    placement_dynamic_bypass_occupy_address0 <= sext_ln253_fu_267_p1(15 - 1 downto 0);
    placement_dynamic_bypass_occupy_address1 <= zext_ln252_fu_236_p1(15 - 1 downto 0);

    placement_dynamic_bypass_occupy_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            placement_dynamic_bypass_occupy_ce0 <= ap_const_logic_1;
        else 
            placement_dynamic_bypass_occupy_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    placement_dynamic_bypass_occupy_ce1_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            placement_dynamic_bypass_occupy_ce1 <= ap_const_logic_1;
        else 
            placement_dynamic_bypass_occupy_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln251_fu_208_p3 <= 
        trunc_ln251_fu_201_p1 when (icmp_ln251_fu_195_p2(0) = '1') else 
        trunc_ln251_1_fu_204_p1;
        sext_ln253_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_260_p3),64));

    tmp_68_cast_fu_222_p4 <= ((trunc_ln251_1_fu_204_p1 & tileId) & ap_const_lv4_0);
    tmp_71_out <= (trunc_ln253_reg_372 & sub182);

    tmp_71_out_ap_vld_assign_proc : process(ap_CS_fsm_state14, icmp_ln282_fu_301_p2, or_ln254_fu_279_p2)
    begin
        if ((((or_ln254_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((or_ln254_fu_279_p2 = ap_const_lv1_1) and (icmp_ln282_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            tmp_71_out_ap_vld <= ap_const_logic_1;
        else 
            tmp_71_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_260_p3 <= (add_ln253_fu_251_p2 & sub182);
    tmp_s_fu_240_p3 <= (formerPC_reg_356 & ap_const_lv4_0);
    trunc_ln251_1_fu_204_p1 <= grp_fu_189_p2(7 - 1 downto 0);
    trunc_ln251_fu_201_p1 <= DynamicPlacement_II_load(7 - 1 downto 0);
    trunc_ln253_fu_256_p1 <= add_ln253_fu_251_p2(11 - 1 downto 0);
    zext_ln252_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln252_reg_361),64));
    zext_ln253_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_240_p3),13));
end behav;
