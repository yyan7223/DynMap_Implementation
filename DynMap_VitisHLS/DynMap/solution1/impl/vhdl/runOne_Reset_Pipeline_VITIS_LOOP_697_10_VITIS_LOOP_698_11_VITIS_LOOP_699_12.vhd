-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runOne_Reset_Pipeline_VITIS_LOOP_697_10_VITIS_LOOP_698_11_VITIS_LOOP_699_12 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    placement_dynamic_bypass_occupy_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    placement_dynamic_bypass_occupy_ce0 : OUT STD_LOGIC;
    placement_dynamic_bypass_occupy_we0 : OUT STD_LOGIC;
    placement_dynamic_bypass_occupy_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of runOne_Reset_Pipeline_VITIS_LOOP_697_10_VITIS_LOOP_698_11_VITIS_LOOP_699_12 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_6400 : STD_LOGIC_VECTOR (14 downto 0) := "110010000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln697_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal select_ln698_fu_210_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln698_reg_340 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln700_fu_230_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln700_reg_345 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln700_2_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_fu_58 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln699_fu_236_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_62 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln698_1_fu_218_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten31_fu_66 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln698_2_fu_248_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_14_fu_70 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln697_1_fu_164_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten45_fu_74 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln697_1_fu_126_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln698_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln697_fu_144_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln699_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln697_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln697_fu_156_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln697_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln698_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln698_fu_198_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_172_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln700_fu_226_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln698_1_fu_242_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_cast_fu_281_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln700_1_fu_288_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln700_1_fu_291_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component runOne_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component runOne_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_14_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_14_fu_70 <= ap_const_lv7_0;
                elsif (((icmp_ln697_fu_120_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_14_fu_70 <= select_ln697_1_fu_164_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten31_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten31_fu_66 <= ap_const_lv10_0;
                elsif (((icmp_ln697_fu_120_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten31_fu_66 <= select_ln698_2_fu_248_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten45_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten45_fu_74 <= ap_const_lv15_0;
                elsif (((icmp_ln697_fu_120_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten45_fu_74 <= add_ln697_1_fu_126_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_62 <= ap_const_lv5_0;
                elsif (((icmp_ln697_fu_120_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_62 <= select_ln698_1_fu_218_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_58 <= ap_const_lv5_0;
                elsif (((icmp_ln697_fu_120_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    k_fu_58 <= add_ln699_fu_236_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln697_fu_120_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln700_reg_345 <= add_ln700_fu_230_p2;
                select_ln698_reg_340 <= select_ln698_fu_210_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln697_1_fu_126_p2 <= std_logic_vector(unsigned(indvar_flatten45_fu_74) + unsigned(ap_const_lv15_1));
    add_ln697_fu_144_p2 <= std_logic_vector(unsigned(i_14_fu_70) + unsigned(ap_const_lv7_1));
    add_ln698_1_fu_242_p2 <= std_logic_vector(unsigned(indvar_flatten31_fu_66) + unsigned(ap_const_lv10_1));
    add_ln698_fu_198_p2 <= std_logic_vector(unsigned(select_ln697_fu_156_p3) + unsigned(ap_const_lv5_1));
    add_ln699_fu_236_p2 <= std_logic_vector(unsigned(select_ln698_fu_210_p3) + unsigned(ap_const_lv5_1));
    add_ln700_1_fu_291_p2 <= std_logic_vector(unsigned(tmp_28_cast_fu_281_p3) + unsigned(zext_ln700_1_fu_288_p1));
    add_ln700_fu_230_p2 <= std_logic_vector(unsigned(tmp_s_fu_172_p3) + unsigned(zext_ln700_fu_226_p1));
    and_ln697_fu_192_p2 <= (xor_ln697_fu_180_p2 and icmp_ln699_fu_186_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln697_fu_120_p2)
    begin
        if (((icmp_ln697_fu_120_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln697_fu_120_p2 <= "1" when (indvar_flatten45_fu_74 = ap_const_lv15_6400) else "0";
    icmp_ln698_fu_150_p2 <= "1" when (indvar_flatten31_fu_66 = ap_const_lv10_100) else "0";
    icmp_ln699_fu_186_p2 <= "1" when (k_fu_58 = ap_const_lv5_10) else "0";
    or_ln698_fu_204_p2 <= (icmp_ln698_fu_150_p2 or and_ln697_fu_192_p2);
    placement_dynamic_bypass_occupy_address0 <= zext_ln700_2_fu_297_p1(15 - 1 downto 0);

    placement_dynamic_bypass_occupy_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            placement_dynamic_bypass_occupy_ce0 <= ap_const_logic_1;
        else 
            placement_dynamic_bypass_occupy_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    placement_dynamic_bypass_occupy_d0 <= ap_const_lv1_0;

    placement_dynamic_bypass_occupy_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            placement_dynamic_bypass_occupy_we0 <= ap_const_logic_1;
        else 
            placement_dynamic_bypass_occupy_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln697_1_fu_164_p3 <= 
        add_ln697_fu_144_p2 when (icmp_ln698_fu_150_p2(0) = '1') else 
        i_14_fu_70;
    select_ln697_fu_156_p3 <= 
        ap_const_lv5_0 when (icmp_ln698_fu_150_p2(0) = '1') else 
        j_fu_62;
    select_ln698_1_fu_218_p3 <= 
        add_ln698_fu_198_p2 when (and_ln697_fu_192_p2(0) = '1') else 
        select_ln697_fu_156_p3;
    select_ln698_2_fu_248_p3 <= 
        ap_const_lv10_1 when (icmp_ln698_fu_150_p2(0) = '1') else 
        add_ln698_1_fu_242_p2;
    select_ln698_fu_210_p3 <= 
        ap_const_lv5_0 when (or_ln698_fu_204_p2(0) = '1') else 
        k_fu_58;
    tmp_28_cast_fu_281_p3 <= (add_ln700_reg_345 & ap_const_lv4_0);
    tmp_s_fu_172_p3 <= (select_ln697_1_fu_164_p3 & ap_const_lv4_0);
    xor_ln697_fu_180_p2 <= (icmp_ln698_fu_150_p2 xor ap_const_lv1_1);
    zext_ln700_1_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln698_reg_340),15));
    zext_ln700_2_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_1_fu_291_p2),64));
    zext_ln700_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln698_1_fu_218_p3),11));
end behav;
