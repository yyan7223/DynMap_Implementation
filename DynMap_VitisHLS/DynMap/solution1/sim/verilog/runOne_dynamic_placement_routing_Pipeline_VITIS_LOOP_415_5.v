// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runOne_dynamic_placement_routing_Pipeline_VITIS_LOOP_415_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        curOptPotentialPlacement_wrAddr_load_1,
        add_ln415,
        tmp_19,
        allocated_tiles_levels_dynamic_shapes_values_address0,
        allocated_tiles_levels_dynamic_shapes_values_ce0,
        allocated_tiles_levels_dynamic_shapes_values_q0,
        curOptPotentialPlacement_address0,
        curOptPotentialPlacement_ce0,
        curOptPotentialPlacement_we0,
        curOptPotentialPlacement_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] curOptPotentialPlacement_wrAddr_load_1;
input  [7:0] add_ln415;
input  [59:0] tmp_19;
output  [10:0] allocated_tiles_levels_dynamic_shapes_values_address0;
output   allocated_tiles_levels_dynamic_shapes_values_ce0;
input  [3:0] allocated_tiles_levels_dynamic_shapes_values_q0;
output  [3:0] curOptPotentialPlacement_address0;
output   curOptPotentialPlacement_ce0;
output   curOptPotentialPlacement_we0;
output  [4:0] curOptPotentialPlacement_d0;

reg ap_idle;
reg allocated_tiles_levels_dynamic_shapes_values_ce0;
reg curOptPotentialPlacement_ce0;
reg curOptPotentialPlacement_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln415_fu_110_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [7:0] inc8028_i_load_reg_170;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] tmp_s_fu_122_p3;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln417_fu_152_p1;
reg   [3:0] i_fu_42;
wire   [3:0] i_4_fu_116_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_3;
reg   [7:0] inc8028_i_fu_46;
wire   [7:0] add_ln418_fu_131_p2;
reg   [7:0] ap_sig_allocacmp_inc8028_i_load;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

runOne_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln415_fu_110_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_42 <= i_4_fu_116_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_42 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln415_fu_110_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            inc8028_i_fu_46 <= add_ln418_fu_131_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            inc8028_i_fu_46 <= curOptPotentialPlacement_wrAddr_load_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inc8028_i_load_reg_170 <= ap_sig_allocacmp_inc8028_i_load;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        allocated_tiles_levels_dynamic_shapes_values_ce0 = 1'b1;
    end else begin
        allocated_tiles_levels_dynamic_shapes_values_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln415_fu_110_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_3 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_42;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_inc8028_i_load = curOptPotentialPlacement_wrAddr_load_1;
    end else begin
        ap_sig_allocacmp_inc8028_i_load = inc8028_i_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        curOptPotentialPlacement_ce0 = 1'b1;
    end else begin
        curOptPotentialPlacement_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        curOptPotentialPlacement_we0 = 1'b1;
    end else begin
        curOptPotentialPlacement_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln418_fu_131_p2 = (ap_sig_allocacmp_inc8028_i_load + 8'd1);

assign allocated_tiles_levels_dynamic_shapes_values_address0 = tmp_s_fu_122_p3;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign curOptPotentialPlacement_address0 = zext_ln417_fu_152_p1;

assign curOptPotentialPlacement_d0 = allocated_tiles_levels_dynamic_shapes_values_q0;

assign i_4_fu_116_p2 = (ap_sig_allocacmp_i_3 + 4'd1);

assign icmp_ln415_fu_110_p2 = ((ap_sig_allocacmp_inc8028_i_load == add_ln415) ? 1'b1 : 1'b0);

assign tmp_s_fu_122_p3 = {{tmp_19}, {ap_sig_allocacmp_i_3}};

assign zext_ln417_fu_152_p1 = inc8028_i_load_reg_170;

endmodule //runOne_dynamic_placement_routing_Pipeline_VITIS_LOOP_415_5
