// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runOne_dynamic_placement_routing_Pipeline_VITIS_LOOP_611_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        DFG_NodesCount_kernels_values_load,
        mul_ln374,
        pred_r,
        inc311623_out,
        inc311623_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] DFG_NodesCount_kernels_values_load;
input  [9:0] mul_ln374;
input  [7:0] pred_r;
output  [5:0] inc311623_out;
output   inc311623_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inc311623_out_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] placement_static_kernels_values_address0;
reg    placement_static_kernels_values_ce0;
wire   [5:0] placement_static_kernels_values_q0;
reg   [5:0] inc311623_load_reg_148;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln611_fu_88_p2;
reg   [0:0] icmp_ln611_reg_153;
wire   [5:0] add_ln611_fu_93_p2;
reg   [5:0] add_ln611_reg_157;
wire   [63:0] zext_ln612_2_fu_108_p1;
reg   [5:0] inc311623_fu_38;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln612_fu_117_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [9:0] zext_ln612_fu_99_p1;
wire   [9:0] add_ln612_fu_103_p2;
wire   [7:0] zext_ln612_1_fu_113_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

runOne_Reset_Pipeline_VITIS_LOOP_719_18_placement_static_kernels_values_ROM_AUTO_1R #(
    .DataWidth( 6 ),
    .AddressRange( 600 ),
    .AddressWidth( 10 ))
placement_static_kernels_values_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(placement_static_kernels_values_address0),
    .ce0(placement_static_kernels_values_ce0),
    .q0(placement_static_kernels_values_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        inc311623_fu_38 <= 6'd0;
    end else if (((icmp_ln612_fu_117_p2 == 1'd0) & (icmp_ln611_reg_153 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        inc311623_fu_38 <= add_ln611_reg_157;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln611_reg_157 <= add_ln611_fu_93_p2;
        icmp_ln611_reg_153 <= icmp_ln611_fu_88_p2;
        inc311623_load_reg_148 <= inc311623_fu_38;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln611_reg_153 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        inc311623_out_ap_vld = 1'b1;
    end else begin
        inc311623_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        placement_static_kernels_values_ce0 = 1'b1;
    end else begin
        placement_static_kernels_values_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln612_fu_117_p2 == 1'd0) & (icmp_ln611_reg_153 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln611_reg_153 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln611_fu_93_p2 = (inc311623_fu_38 + 6'd1);

assign add_ln612_fu_103_p2 = (mul_ln374 + zext_ln612_fu_99_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign icmp_ln611_fu_88_p2 = ((inc311623_fu_38 < DFG_NodesCount_kernels_values_load) ? 1'b1 : 1'b0);

assign icmp_ln612_fu_117_p2 = ((pred_r == zext_ln612_1_fu_113_p1) ? 1'b1 : 1'b0);

assign inc311623_out = inc311623_load_reg_148;

assign placement_static_kernels_values_address0 = zext_ln612_2_fu_108_p1;

assign zext_ln612_1_fu_113_p1 = placement_static_kernels_values_q0;

assign zext_ln612_2_fu_108_p1 = add_ln612_fu_103_p2;

assign zext_ln612_fu_99_p1 = inc311623_fu_38;

endmodule //runOne_dynamic_placement_routing_Pipeline_VITIS_LOOP_611_4
