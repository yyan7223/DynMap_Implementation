// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_188_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bypassSrcOpt_load,
        bypassSrcOptIdx_out,
        bypassSrcOptIdx_out_ap_vld,
        placement_dynamic_dict_Opt2PC_keys_address0,
        placement_dynamic_dict_Opt2PC_keys_ce0,
        placement_dynamic_dict_Opt2PC_keys_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] bypassSrcOpt_load;
output  [6:0] bypassSrcOptIdx_out;
output   bypassSrcOptIdx_out_ap_vld;
output  [6:0] placement_dynamic_dict_Opt2PC_keys_address0;
output   placement_dynamic_dict_Opt2PC_keys_ce0;
input  [7:0] placement_dynamic_dict_Opt2PC_keys_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] bypassSrcOptIdx_out;
reg bypassSrcOptIdx_out_ap_vld;
reg placement_dynamic_dict_Opt2PC_keys_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] bypassSrcOptIdx_1_reg_117;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln188_fu_79_p2;
reg   [0:0] icmp_ln188_reg_122;
wire   [6:0] bypassSrcOptIdx_2_fu_85_p2;
reg   [6:0] bypassSrcOptIdx_2_reg_126;
wire   [63:0] trunc_ln189_cast_fu_91_p1;
reg   [6:0] bypassSrcOptIdx_fu_40;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln189_fu_96_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bypassSrcOptIdx_fu_40 <= 7'd0;
    end else if (((icmp_ln189_fu_96_p2 == 1'd0) & (icmp_ln188_reg_122 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        bypassSrcOptIdx_fu_40 <= bypassSrcOptIdx_2_reg_126;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bypassSrcOptIdx_1_reg_117 <= bypassSrcOptIdx_fu_40;
        bypassSrcOptIdx_2_reg_126 <= bypassSrcOptIdx_2_fu_85_p2;
        icmp_ln188_reg_122 <= icmp_ln188_fu_79_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bypassSrcOptIdx_out = 7'd100;
    end else if (((icmp_ln188_reg_122 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        bypassSrcOptIdx_out = bypassSrcOptIdx_1_reg_117;
    end else begin
        bypassSrcOptIdx_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln188_reg_122 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        bypassSrcOptIdx_out_ap_vld = 1'b1;
    end else begin
        bypassSrcOptIdx_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        placement_dynamic_dict_Opt2PC_keys_ce0 = 1'b1;
    end else begin
        placement_dynamic_dict_Opt2PC_keys_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln189_fu_96_p2 == 1'd0) & (icmp_ln188_reg_122 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln188_reg_122 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign bypassSrcOptIdx_2_fu_85_p2 = (bypassSrcOptIdx_fu_40 + 7'd1);

assign icmp_ln188_fu_79_p2 = ((bypassSrcOptIdx_fu_40 < 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln189_fu_96_p2 = ((placement_dynamic_dict_Opt2PC_keys_q0 == bypassSrcOpt_load) ? 1'b1 : 1'b0);

assign placement_dynamic_dict_Opt2PC_keys_address0 = trunc_ln189_cast_fu_91_p1;

assign trunc_ln189_cast_fu_91_p1 = bypassSrcOptIdx_fu_40;

endmodule //runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_188_1
