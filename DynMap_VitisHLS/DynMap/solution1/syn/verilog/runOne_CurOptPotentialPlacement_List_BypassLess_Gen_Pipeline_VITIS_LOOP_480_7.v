// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runOne_CurOptPotentialPlacement_List_BypassLess_Gen_Pipeline_VITIS_LOOP_480_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        existLen,
        zext_ln480,
        curOptPotentialPlacement_address0,
        curOptPotentialPlacement_ce0,
        curOptPotentialPlacement_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] existLen;
input  [3:0] zext_ln480;
output  [3:0] curOptPotentialPlacement_address0;
output   curOptPotentialPlacement_ce0;
input  [4:0] curOptPotentialPlacement_q0;
output  [0:0] ap_return;

reg ap_idle;
reg curOptPotentialPlacement_ce0;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [0:0] icmp_ln481_fu_104_p2;
reg   [0:0] icmp_ln480_reg_125;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] merge_reg_63;
wire   [4:0] zext_ln480_cast_fu_75_p1;
reg   [4:0] zext_ln480_cast_reg_120;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln480_fu_87_p2;
wire   [6:0] j_11_fu_93_p2;
reg   [6:0] j_11_reg_129;
reg   [0:0] ap_phi_mux_merge_phi_fu_67_p4;
wire   [63:0] zext_ln481_fu_99_p1;
reg   [6:0] j_fu_34;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j_10;
reg   [0:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 1'd0;
#0 ap_done_reg = 1'b0;
end

runOne_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln480_reg_125 == 1'd0) | (icmp_ln481_fu_104_p2 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_merge_phi_fu_67_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        j_fu_34 <= 7'd0;
    end else if (((icmp_ln480_reg_125 == 1'd1) & (icmp_ln481_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_fu_34 <= j_11_reg_129;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln480_reg_125 == 1'd1) & (icmp_ln481_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        merge_reg_63 <= 1'd0;
    end else if (((icmp_ln480_fu_87_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        merge_reg_63 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        icmp_ln480_reg_125 <= icmp_ln480_fu_87_p2;
        j_11_reg_129 <= j_11_fu_93_p2;
        zext_ln480_cast_reg_120[3 : 0] <= zext_ln480_cast_fu_75_p1[3 : 0];
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln480_reg_125 == 1'd0) | (icmp_ln481_fu_104_p2 == 1'd1)))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln480_reg_125 == 1'd1) & (icmp_ln481_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_merge_phi_fu_67_p4 = 1'd0;
    end else begin
        ap_phi_mux_merge_phi_fu_67_p4 = merge_reg_63;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln480_reg_125 == 1'd0) | (icmp_ln481_fu_104_p2 == 1'd1)))) begin
        ap_return = ap_phi_mux_merge_phi_fu_67_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_j_10 = 7'd0;
    end else begin
        ap_sig_allocacmp_j_10 = j_fu_34;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        curOptPotentialPlacement_ce0 = 1'b1;
    end else begin
        curOptPotentialPlacement_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign curOptPotentialPlacement_address0 = zext_ln481_fu_99_p1;

assign icmp_ln480_fu_87_p2 = ((ap_sig_allocacmp_j_10 < existLen) ? 1'b1 : 1'b0);

assign icmp_ln481_fu_104_p2 = ((zext_ln480_cast_reg_120 == curOptPotentialPlacement_q0) ? 1'b1 : 1'b0);

assign j_11_fu_93_p2 = (ap_sig_allocacmp_j_10 + 7'd1);

assign zext_ln480_cast_fu_75_p1 = zext_ln480;

assign zext_ln481_fu_99_p1 = ap_sig_allocacmp_j_10;

always @ (posedge ap_clk) begin
    zext_ln480_cast_reg_120[4] <= 1'b0;
end

endmodule //runOne_CurOptPotentialPlacement_List_BypassLess_Gen_Pipeline_VITIS_LOOP_480_7
