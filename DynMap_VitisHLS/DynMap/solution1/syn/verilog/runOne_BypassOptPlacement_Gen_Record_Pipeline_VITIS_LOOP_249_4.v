// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_249_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add_ln192,
        DynamicPlacement_II_load,
        tileId,
        idxprom174,
        idxprom20,
        sub182,
        upperLimit,
        p_out,
        p_out_ap_vld,
        add_ln252_out,
        add_ln252_out_ap_vld,
        tmp_71_out,
        tmp_71_out_ap_vld,
        placement_dynamic_bypass_occupy_address0,
        placement_dynamic_bypass_occupy_ce0,
        placement_dynamic_bypass_occupy_q0,
        placement_dynamic_bypass_occupy_address1,
        placement_dynamic_bypass_occupy_ce1,
        placement_dynamic_bypass_occupy_q1,
        IDX_pd_bypass_i,
        IDX_pd_bypass_o,
        IDX_pd_bypass_o_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] add_ln192;
input  [7:0] DynamicPlacement_II_load;
input  [3:0] tileId;
input  [3:0] idxprom174;
input  [4:0] idxprom20;
input  [3:0] sub182;
input  [7:0] upperLimit;
output  [7:0] p_out;
output   p_out_ap_vld;
output  [12:0] add_ln252_out;
output   add_ln252_out_ap_vld;
output  [12:0] tmp_71_out;
output   tmp_71_out_ap_vld;
output  [12:0] placement_dynamic_bypass_occupy_address0;
output   placement_dynamic_bypass_occupy_ce0;
input  [0:0] placement_dynamic_bypass_occupy_q0;
output  [12:0] placement_dynamic_bypass_occupy_address1;
output   placement_dynamic_bypass_occupy_ce1;
input  [0:0] placement_dynamic_bypass_occupy_q1;
input  [7:0] IDX_pd_bypass_i;
output  [7:0] IDX_pd_bypass_o;
output   IDX_pd_bypass_o_ap_vld;
output  [0:0] ap_return;

reg ap_idle;
reg p_out_ap_vld;
reg add_ln252_out_ap_vld;
reg tmp_71_out_ap_vld;
reg placement_dynamic_bypass_occupy_ce0;
reg placement_dynamic_bypass_occupy_ce1;
reg[7:0] IDX_pd_bypass_o;
reg IDX_pd_bypass_o_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state14;
wire    ap_block_state14_pp0_stage13_iter0;
wire   [0:0] icmp_ln282_fu_301_p2;
wire   [0:0] or_ln254_fu_279_p2;
reg    ap_condition_exit_pp0_iter0_stage13;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_block_state1_pp0_stage0_iter0;
wire  signed [10:0] idxprom20_cast_fu_173_p1;
reg  signed [10:0] idxprom20_cast_reg_340;
wire  signed [12:0] idxprom174_cast_fu_177_p1;
reg  signed [12:0] idxprom174_cast_reg_345;
reg   [7:0] p_load_reg_350;
wire   [4:0] formerPC_fu_216_p2;
reg   [4:0] formerPC_reg_356;
wire    ap_CS_fsm_state12;
wire    ap_block_state12_pp0_stage11_iter0;
wire   [12:0] add_ln252_fu_231_p2;
reg   [12:0] add_ln252_reg_361;
wire    ap_CS_fsm_state13;
wire    ap_block_state13_pp0_stage12_iter0;
wire   [8:0] trunc_ln253_fu_256_p1;
reg   [8:0] trunc_ln253_reg_372;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_165_p4;
wire   [63:0] zext_ln252_fu_236_p1;
wire  signed [63:0] sext_ln253_fu_267_p1;
wire   [7:0] add_ln280_fu_289_p2;
reg   [7:0] empty_fu_70;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_p_load;
wire   [7:0] grp_fu_189_p2;
wire   [0:0] icmp_ln251_fu_195_p2;
wire   [4:0] trunc_ln251_fu_201_p1;
wire   [4:0] trunc_ln251_1_fu_204_p1;
wire   [4:0] select_ln251_fu_208_p3;
wire   [12:0] tmp_68_cast_fu_222_p4;
wire   [8:0] tmp_s_fu_240_p3;
wire   [10:0] zext_ln253_fu_247_p1;
wire   [10:0] add_ln253_fu_251_p2;
wire   [14:0] tmp_fu_260_p3;
reg   [0:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [13:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_ST_fsm_state2_blk;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_ST_fsm_state3_blk;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_ST_fsm_state4_blk;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_ST_fsm_state5_blk;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_ST_fsm_state6_blk;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_ST_fsm_state7_blk;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_ST_fsm_state8_blk;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_ST_fsm_state9_blk;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_ST_fsm_state10_blk;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_return_preg = 1'd0;
#0 ap_done_reg = 1'b0;
end

runOne_srem_8ns_8ns_8_12_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
srem_8ns_8ns_8_12_1_U167(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_p_load),
    .din1(DynamicPlacement_II_load),
    .ce(1'b1),
    .dout(grp_fu_189_p2)
);

runOne_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage13),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state14) & ((or_ln254_fu_279_p2 == 1'd0) | (icmp_ln282_fu_301_p2 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_165_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        empty_fu_70 <= add_ln192;
    end else if (((or_ln254_fu_279_p2 == 1'd1) & (icmp_ln282_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        empty_fu_70 <= add_ln280_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln252_reg_361 <= add_ln252_fu_231_p2;
        formerPC_reg_356 <= formerPC_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        idxprom174_cast_reg_345 <= idxprom174_cast_fu_177_p1;
        idxprom20_cast_reg_340 <= idxprom20_cast_fu_173_p1;
        p_load_reg_350 <= ap_sig_allocacmp_p_load;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        trunc_ln253_reg_372 <= trunc_ln253_fu_256_p1;
    end
end

always @ (*) begin
    if (((or_ln254_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        IDX_pd_bypass_o = add_ln280_fu_289_p2;
    end else begin
        IDX_pd_bypass_o = IDX_pd_bypass_i;
    end
end

always @ (*) begin
    if (((or_ln254_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        IDX_pd_bypass_o_ap_vld = 1'b1;
    end else begin
        IDX_pd_bypass_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((or_ln254_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14)) | ((or_ln254_fu_279_p2 == 1'd1) & (icmp_ln282_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14)))) begin
        add_ln252_out_ap_vld = 1'b1;
    end else begin
        add_ln252_out_ap_vld = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((or_ln254_fu_279_p2 == 1'd0) | (icmp_ln282_fu_301_p2 == 1'd1)))) begin
        ap_condition_exit_pp0_iter0_stage13 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage13 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if (((or_ln254_fu_279_p2 == 1'd1) & (icmp_ln282_fu_301_p2 == 1'd1))) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_165_p4 = 1'd0;
        end else if ((or_ln254_fu_279_p2 == 1'd0)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_165_p4 = 1'd1;
        end else begin
            ap_phi_mux_UnifiedRetVal_phi_fu_165_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_165_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((or_ln254_fu_279_p2 == 1'd0) | (icmp_ln282_fu_301_p2 == 1'd1)))) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_165_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_p_load = add_ln192;
    end else begin
        ap_sig_allocacmp_p_load = empty_fu_70;
    end
end

always @ (*) begin
    if ((((or_ln254_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14)) | ((or_ln254_fu_279_p2 == 1'd1) & (icmp_ln282_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14)))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        placement_dynamic_bypass_occupy_ce0 = 1'b1;
    end else begin
        placement_dynamic_bypass_occupy_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        placement_dynamic_bypass_occupy_ce1 = 1'b1;
    end else begin
        placement_dynamic_bypass_occupy_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((or_ln254_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14)) | ((or_ln254_fu_279_p2 == 1'd1) & (icmp_ln282_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14)))) begin
        tmp_71_out_ap_vld = 1'b1;
    end else begin
        tmp_71_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln252_fu_231_p2 = ($signed(tmp_68_cast_fu_222_p4) + $signed(idxprom174_cast_reg_345));

assign add_ln252_out = add_ln252_reg_361;

assign add_ln253_fu_251_p2 = ($signed(zext_ln253_fu_247_p1) + $signed(idxprom20_cast_reg_340));

assign add_ln280_fu_289_p2 = (IDX_pd_bypass_i + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage13;

assign formerPC_fu_216_p2 = ($signed(select_ln251_fu_208_p3) + $signed(5'd31));

assign icmp_ln251_fu_195_p2 = ((grp_fu_189_p2 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln282_fu_301_p2 = ((add_ln280_fu_289_p2 == upperLimit) ? 1'b1 : 1'b0);

assign idxprom174_cast_fu_177_p1 = $signed(idxprom174);

assign idxprom20_cast_fu_173_p1 = $signed(idxprom20);

assign or_ln254_fu_279_p2 = (placement_dynamic_bypass_occupy_q1 | placement_dynamic_bypass_occupy_q0);

assign p_out = p_load_reg_350;

assign placement_dynamic_bypass_occupy_address0 = sext_ln253_fu_267_p1;

assign placement_dynamic_bypass_occupy_address1 = zext_ln252_fu_236_p1;

assign select_ln251_fu_208_p3 = ((icmp_ln251_fu_195_p2[0:0] == 1'b1) ? trunc_ln251_fu_201_p1 : trunc_ln251_1_fu_204_p1);

assign sext_ln253_fu_267_p1 = $signed(tmp_fu_260_p3);

assign tmp_68_cast_fu_222_p4 = {{{trunc_ln251_1_fu_204_p1}, {tileId}}, {4'd0}};

assign tmp_71_out = {{trunc_ln253_reg_372}, {sub182}};

assign tmp_fu_260_p3 = {{add_ln253_fu_251_p2}, {sub182}};

assign tmp_s_fu_240_p3 = {{formerPC_reg_356}, {4'd0}};

assign trunc_ln251_1_fu_204_p1 = grp_fu_189_p2[4:0];

assign trunc_ln251_fu_201_p1 = DynamicPlacement_II_load[4:0];

assign trunc_ln253_fu_256_p1 = add_ln253_fu_251_p2[8:0];

assign zext_ln252_fu_236_p1 = add_ln252_reg_361;

assign zext_ln253_fu_247_p1 = tmp_s_fu_240_p3;

endmodule //runOne_BypassOptPlacement_Gen_Record_Pipeline_VITIS_LOOP_249_4
