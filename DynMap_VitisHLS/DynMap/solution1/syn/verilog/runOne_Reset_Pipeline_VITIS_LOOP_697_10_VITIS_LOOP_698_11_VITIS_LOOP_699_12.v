// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runOne_Reset_Pipeline_VITIS_LOOP_697_10_VITIS_LOOP_698_11_VITIS_LOOP_699_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        placement_dynamic_bypass_occupy_address0,
        placement_dynamic_bypass_occupy_ce0,
        placement_dynamic_bypass_occupy_we0,
        placement_dynamic_bypass_occupy_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] placement_dynamic_bypass_occupy_address0;
output   placement_dynamic_bypass_occupy_ce0;
output   placement_dynamic_bypass_occupy_we0;
output  [0:0] placement_dynamic_bypass_occupy_d0;

reg ap_idle;
reg placement_dynamic_bypass_occupy_ce0;
reg placement_dynamic_bypass_occupy_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln697_fu_116_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [4:0] select_ln698_fu_206_p3;
reg   [4:0] select_ln698_reg_336;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] add_ln700_fu_226_p2;
reg   [8:0] add_ln700_reg_341;
wire   [63:0] zext_ln700_2_fu_293_p1;
wire    ap_block_pp0_stage0;
reg   [4:0] k_fu_54;
wire   [4:0] add_ln699_fu_232_p2;
wire    ap_loop_init;
reg   [4:0] j_fu_58;
wire   [4:0] select_ln698_1_fu_214_p3;
reg   [9:0] indvar_flatten32_fu_62;
wire   [9:0] select_ln698_2_fu_244_p3;
reg   [4:0] i_14_fu_66;
wire   [4:0] select_ln697_1_fu_160_p3;
reg   [12:0] indvar_flatten46_fu_70;
wire   [12:0] add_ln697_1_fu_122_p2;
wire   [0:0] icmp_ln698_fu_146_p2;
wire   [4:0] add_ln697_fu_140_p2;
wire   [0:0] icmp_ln699_fu_182_p2;
wire   [0:0] xor_ln697_fu_176_p2;
wire   [4:0] select_ln697_fu_152_p3;
wire   [0:0] and_ln697_fu_188_p2;
wire   [0:0] or_ln698_fu_200_p2;
wire   [4:0] add_ln698_fu_194_p2;
wire   [8:0] tmp_s_fu_168_p3;
wire   [8:0] zext_ln700_fu_222_p1;
wire   [9:0] add_ln698_1_fu_238_p2;
wire   [12:0] tmp_28_cast_fu_277_p3;
wire   [12:0] zext_ln700_1_fu_284_p1;
wire   [12:0] add_ln700_1_fu_287_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

runOne_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_14_fu_66 <= 5'd0;
        end else if (((icmp_ln697_fu_116_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_14_fu_66 <= select_ln697_1_fu_160_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten32_fu_62 <= 10'd0;
        end else if (((icmp_ln697_fu_116_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten32_fu_62 <= select_ln698_2_fu_244_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten46_fu_70 <= 13'd0;
        end else if (((icmp_ln697_fu_116_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten46_fu_70 <= add_ln697_1_fu_122_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_58 <= 5'd0;
        end else if (((icmp_ln697_fu_116_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_58 <= select_ln698_1_fu_214_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_54 <= 5'd0;
        end else if (((icmp_ln697_fu_116_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_fu_54 <= add_ln699_fu_232_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln697_fu_116_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln700_reg_341 <= add_ln700_fu_226_p2;
        select_ln698_reg_336 <= select_ln698_fu_206_p3;
    end
end

always @ (*) begin
    if (((icmp_ln697_fu_116_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        placement_dynamic_bypass_occupy_ce0 = 1'b1;
    end else begin
        placement_dynamic_bypass_occupy_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        placement_dynamic_bypass_occupy_we0 = 1'b1;
    end else begin
        placement_dynamic_bypass_occupy_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln697_1_fu_122_p2 = (indvar_flatten46_fu_70 + 13'd1);

assign add_ln697_fu_140_p2 = (i_14_fu_66 + 5'd1);

assign add_ln698_1_fu_238_p2 = (indvar_flatten32_fu_62 + 10'd1);

assign add_ln698_fu_194_p2 = (select_ln697_fu_152_p3 + 5'd1);

assign add_ln699_fu_232_p2 = (select_ln698_fu_206_p3 + 5'd1);

assign add_ln700_1_fu_287_p2 = (tmp_28_cast_fu_277_p3 + zext_ln700_1_fu_284_p1);

assign add_ln700_fu_226_p2 = (tmp_s_fu_168_p3 + zext_ln700_fu_222_p1);

assign and_ln697_fu_188_p2 = (xor_ln697_fu_176_p2 & icmp_ln699_fu_182_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln697_fu_116_p2 = ((indvar_flatten46_fu_70 == 13'd5120) ? 1'b1 : 1'b0);

assign icmp_ln698_fu_146_p2 = ((indvar_flatten32_fu_62 == 10'd256) ? 1'b1 : 1'b0);

assign icmp_ln699_fu_182_p2 = ((k_fu_54 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln698_fu_200_p2 = (icmp_ln698_fu_146_p2 | and_ln697_fu_188_p2);

assign placement_dynamic_bypass_occupy_address0 = zext_ln700_2_fu_293_p1;

assign placement_dynamic_bypass_occupy_d0 = 1'd0;

assign select_ln697_1_fu_160_p3 = ((icmp_ln698_fu_146_p2[0:0] == 1'b1) ? add_ln697_fu_140_p2 : i_14_fu_66);

assign select_ln697_fu_152_p3 = ((icmp_ln698_fu_146_p2[0:0] == 1'b1) ? 5'd0 : j_fu_58);

assign select_ln698_1_fu_214_p3 = ((and_ln697_fu_188_p2[0:0] == 1'b1) ? add_ln698_fu_194_p2 : select_ln697_fu_152_p3);

assign select_ln698_2_fu_244_p3 = ((icmp_ln698_fu_146_p2[0:0] == 1'b1) ? 10'd1 : add_ln698_1_fu_238_p2);

assign select_ln698_fu_206_p3 = ((or_ln698_fu_200_p2[0:0] == 1'b1) ? 5'd0 : k_fu_54);

assign tmp_28_cast_fu_277_p3 = {{add_ln700_reg_341}, {4'd0}};

assign tmp_s_fu_168_p3 = {{select_ln697_1_fu_160_p3}, {4'd0}};

assign xor_ln697_fu_176_p2 = (icmp_ln698_fu_146_p2 ^ 1'd1);

assign zext_ln700_1_fu_284_p1 = select_ln698_reg_336;

assign zext_ln700_2_fu_293_p1 = add_ln700_1_fu_287_p2;

assign zext_ln700_fu_222_p1 = select_ln698_1_fu_214_p3;

endmodule //runOne_Reset_Pipeline_VITIS_LOOP_697_10_VITIS_LOOP_698_11_VITIS_LOOP_699_12
