// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runOne_Dependency_Update_BypassMode_SrcTgt_Pipeline_VITIS_LOOP_102_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add_ln103,
        add_ln103_1_out,
        add_ln103_1_out_ap_vld,
        dependency_successor_values_address0,
        dependency_successor_values_ce0,
        dependency_successor_values_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [10:0] add_ln103;
output  [10:0] add_ln103_1_out;
output   add_ln103_1_out_ap_vld;
output  [10:0] dependency_successor_values_address0;
output   dependency_successor_values_ce0;
input  [7:0] dependency_successor_values_q0;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg add_ln103_1_out_ap_vld;
reg dependency_successor_values_ce0;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln102_fu_96_p2;
reg   [0:0] icmp_ln102_reg_144;
wire    ap_CS_fsm_state2;
wire   [4:0] add_ln102_fu_102_p2;
reg   [4:0] add_ln102_reg_148;
wire   [10:0] add_ln103_1_fu_112_p2;
reg   [10:0] add_ln103_1_reg_153;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_80_p4;
reg   [0:0] UnifiedRetVal_reg_76;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln103_1_fu_117_p1;
reg   [4:0] i_fu_46;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln103_fu_122_p2;
wire   [10:0] zext_ln103_fu_108_p1;
reg   [0:0] ap_return_preg;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_80_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln102_reg_144 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        UnifiedRetVal_reg_76 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        UnifiedRetVal_reg_76 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_46 <= 5'd0;
    end else if (((icmp_ln103_fu_122_p2 == 1'd0) & (icmp_ln102_reg_144 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_fu_46 <= add_ln102_reg_148;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln102_reg_148 <= add_ln102_fu_102_p2;
        icmp_ln102_reg_144 <= icmp_ln102_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln102_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln103_1_reg_153 <= add_ln103_1_fu_112_p2;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_144 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln103_1_out_ap_vld = 1'b1;
    end else begin
        add_ln103_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_reg_144 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_80_p4 = 1'd0;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_80_p4 = UnifiedRetVal_reg_76;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_80_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dependency_successor_values_ce0 = 1'b1;
    end else begin
        dependency_successor_values_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln103_fu_122_p2 == 1'd0) & (icmp_ln102_reg_144 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((icmp_ln102_reg_144 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln102_fu_102_p2 = (i_fu_46 + 5'd1);

assign add_ln103_1_fu_112_p2 = (add_ln103 + zext_ln103_fu_108_p1);

assign add_ln103_1_out = add_ln103_1_reg_153;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign dependency_successor_values_address0 = zext_ln103_1_fu_117_p1;

assign icmp_ln102_fu_96_p2 = ((i_fu_46 < 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln103_fu_122_p2 = ((dependency_successor_values_q0 == 8'd255) ? 1'b1 : 1'b0);

assign zext_ln103_1_fu_117_p1 = add_ln103_1_fu_112_p2;

assign zext_ln103_fu_108_p1 = i_fu_46;

endmodule //runOne_Dependency_Update_BypassMode_SrcTgt_Pipeline_VITIS_LOOP_102_7
