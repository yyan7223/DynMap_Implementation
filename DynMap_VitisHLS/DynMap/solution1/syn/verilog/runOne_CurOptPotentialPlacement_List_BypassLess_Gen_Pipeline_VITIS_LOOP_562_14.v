// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runOne_CurOptPotentialPlacement_List_BypassLess_Gen_Pipeline_VITIS_LOOP_562_14 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inc23826,
        CGRA_NumTiles_shapes_values_load_1,
        shape_idx_load,
        BypassTile,
        zext_ln561_2,
        existLen_2_out,
        existLen_2_out_ap_vld,
        curOptPotentialPlacement_address0,
        curOptPotentialPlacement_ce0,
        curOptPotentialPlacement_we0,
        curOptPotentialPlacement_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] inc23826;
input  [3:0] CGRA_NumTiles_shapes_values_load_1;
input  [4:0] shape_idx_load;
input  [3:0] BypassTile;
input  [3:0] zext_ln561_2;
output  [7:0] existLen_2_out;
output   existLen_2_out_ap_vld;
output  [3:0] curOptPotentialPlacement_address0;
output   curOptPotentialPlacement_ce0;
output   curOptPotentialPlacement_we0;
output  [4:0] curOptPotentialPlacement_d0;

reg ap_idle;
reg existLen_2_out_ap_vld;
reg curOptPotentialPlacement_ce0;
reg curOptPotentialPlacement_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln562_fu_142_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [8:0] allocated_tiles_shapes_values_address0;
reg    allocated_tiles_shapes_values_ce0;
wire   [3:0] allocated_tiles_shapes_values_q0;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] zext_ln561_2_cast_fu_125_p1;
reg   [4:0] zext_ln561_2_cast_reg_220;
wire   [63:0] zext_ln563_fu_162_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln564_fu_180_p1;
wire   [0:0] icmp_ln563_fu_172_p2;
reg   [3:0] i_fu_54;
wire   [3:0] i_30_fu_148_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_29;
reg   [7:0] existLen_2_fu_58;
wire   [7:0] add_ln565_fu_185_p2;
wire    ap_block_pp0_stage0_01001;
wire   [8:0] tmp_s_fu_154_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

runOne_CurOptPotentialPlacement_List_BypassLess_Gen_Pipeline_VITIS_LOOP_453_4_allocaeOg #(
    .DataWidth( 4 ),
    .AddressRange( 320 ),
    .AddressWidth( 9 ))
allocated_tiles_shapes_values_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(allocated_tiles_shapes_values_address0),
    .ce0(allocated_tiles_shapes_values_ce0),
    .q0(allocated_tiles_shapes_values_q0)
);

runOne_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            existLen_2_fu_58 <= inc23826;
        end else if (((icmp_ln563_fu_172_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            existLen_2_fu_58 <= add_ln565_fu_185_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln562_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_54 <= i_30_fu_148_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_54 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln561_2_cast_reg_220[3 : 0] <= zext_ln561_2_cast_fu_125_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        allocated_tiles_shapes_values_ce0 = 1'b1;
    end else begin
        allocated_tiles_shapes_values_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln562_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_29 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_29 = i_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        curOptPotentialPlacement_ce0 = 1'b1;
    end else begin
        curOptPotentialPlacement_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln563_fu_172_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        curOptPotentialPlacement_we0 = 1'b1;
    end else begin
        curOptPotentialPlacement_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln562_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        existLen_2_out_ap_vld = 1'b1;
    end else begin
        existLen_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln565_fu_185_p2 = (existLen_2_fu_58 + 8'd1);

assign allocated_tiles_shapes_values_address0 = zext_ln563_fu_162_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign curOptPotentialPlacement_address0 = zext_ln564_fu_180_p1;

assign curOptPotentialPlacement_d0 = zext_ln561_2_cast_reg_220;

assign existLen_2_out = existLen_2_fu_58;

assign i_30_fu_148_p2 = (ap_sig_allocacmp_i_29 + 4'd1);

assign icmp_ln562_fu_142_p2 = ((ap_sig_allocacmp_i_29 == CGRA_NumTiles_shapes_values_load_1) ? 1'b1 : 1'b0);

assign icmp_ln563_fu_172_p2 = ((allocated_tiles_shapes_values_q0 == BypassTile) ? 1'b1 : 1'b0);

assign tmp_s_fu_154_p3 = {{shape_idx_load}, {ap_sig_allocacmp_i_29}};

assign zext_ln561_2_cast_fu_125_p1 = zext_ln561_2;

assign zext_ln563_fu_162_p1 = tmp_s_fu_154_p3;

assign zext_ln564_fu_180_p1 = existLen_2_fu_58;

always @ (posedge ap_clk) begin
    zext_ln561_2_cast_reg_220[4] <= 1'b0;
end

endmodule //runOne_CurOptPotentialPlacement_List_BypassLess_Gen_Pipeline_VITIS_LOOP_562_14
