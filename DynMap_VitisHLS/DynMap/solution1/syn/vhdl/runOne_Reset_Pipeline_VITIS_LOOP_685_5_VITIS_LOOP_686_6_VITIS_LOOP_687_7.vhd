-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runOne_Reset_Pipeline_VITIS_LOOP_685_5_VITIS_LOOP_686_6_VITIS_LOOP_687_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    placement_dynamic_bypass_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    placement_dynamic_bypass_ce0 : OUT STD_LOGIC;
    placement_dynamic_bypass_we0 : OUT STD_LOGIC;
    placement_dynamic_bypass_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of runOne_Reset_Pipeline_VITIS_LOOP_685_5_VITIS_LOOP_686_6_VITIS_LOOP_687_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv13_1900 : STD_LOGIC_VECTOR (12 downto 0) := "1100100000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv12_640 : STD_LOGIC_VECTOR (11 downto 0) := "011001000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_64 : STD_LOGIC_VECTOR (8 downto 0) := "001100100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln685_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln686_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln686_reg_341 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln686_reg_341_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln686_fu_236_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln686_reg_353 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln688_3_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_fu_62 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln687_fu_256_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_66 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln686_1_fu_244_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_fu_70 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln686_2_fu_172_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (11 downto 0);
    signal i_12_fu_74 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln685_1_fu_154_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_12_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten16_fu_78 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln685_1_fu_130_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten16_load : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln685_fu_142_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln686_1_fu_166_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln687_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln685_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln685_fu_201_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln685_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln686_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln686_fu_225_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_293_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_24_cast_fu_272_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln688_2_fu_279_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln688_1_fu_282_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_293_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_293_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_293_p20 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component runOne_mac_muladd_3ns_7ns_7ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component runOne_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_3ns_7ns_7ns_9_4_1_U1 : component runOne_mac_muladd_3ns_7ns_7ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_293_p0,
        din1 => grp_fu_293_p1,
        din2 => grp_fu_293_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_293_p3);

    flow_control_loop_pipe_sequential_init_U : component runOne_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_12_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln685_fu_124_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_12_fu_74 <= select_ln685_1_fu_154_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_12_fu_74 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten16_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln685_fu_124_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten16_fu_78 <= add_ln685_1_fu_130_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten16_fu_78 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln685_fu_124_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_70 <= select_ln686_2_fu_172_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_70 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    j_fu_66 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    j_fu_66 <= select_ln686_1_fu_244_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    k_fu_62 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    k_fu_62 <= add_ln687_fu_256_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln686_reg_341_pp0_iter1_reg <= icmp_ln686_reg_341;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln685_fu_124_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln686_reg_341 <= icmp_ln686_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                select_ln686_reg_353 <= select_ln686_fu_236_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln685_1_fu_130_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten16_load) + unsigned(ap_const_lv13_1));
    add_ln685_fu_142_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_12_load) + unsigned(ap_const_lv3_1));
    add_ln686_1_fu_166_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv12_1));
    add_ln686_fu_225_p2 <= std_logic_vector(unsigned(select_ln685_fu_201_p3) + unsigned(ap_const_lv7_1));
    add_ln687_fu_256_p2 <= std_logic_vector(unsigned(select_ln686_fu_236_p3) + unsigned(ap_const_lv5_1));
    add_ln688_1_fu_282_p2 <= std_logic_vector(unsigned(tmp_24_cast_fu_272_p3) + unsigned(zext_ln688_2_fu_279_p1));
    and_ln685_fu_219_p2 <= (xor_ln685_fu_208_p2 and icmp_ln687_fu_213_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln685_fu_124_p2)
    begin
        if (((icmp_ln685_fu_124_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_12_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_12_fu_74)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_12_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_12_load <= i_12_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten16_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten16_fu_78)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten16_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten16_load <= indvar_flatten16_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_70)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_70;
        end if; 
    end process;

    grp_fu_293_p0 <= grp_fu_293_p00(3 - 1 downto 0);
    grp_fu_293_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln685_1_fu_154_p3),9));
    grp_fu_293_p1 <= ap_const_lv9_64(7 - 1 downto 0);
    grp_fu_293_p2 <= grp_fu_293_p20(7 - 1 downto 0);
    grp_fu_293_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln686_1_fu_244_p3),9));
    icmp_ln685_fu_124_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten16_load = ap_const_lv13_1900) else "0";
    icmp_ln686_fu_148_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv12_640) else "0";
    icmp_ln687_fu_213_p2 <= "1" when (k_fu_62 = ap_const_lv5_10) else "0";
    or_ln686_fu_231_p2 <= (icmp_ln686_reg_341_pp0_iter1_reg or and_ln685_fu_219_p2);
    placement_dynamic_bypass_address0 <= zext_ln688_3_fu_288_p1(13 - 1 downto 0);

    placement_dynamic_bypass_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            placement_dynamic_bypass_ce0 <= ap_const_logic_1;
        else 
            placement_dynamic_bypass_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    placement_dynamic_bypass_d0 <= ap_const_lv8_FF;

    placement_dynamic_bypass_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            placement_dynamic_bypass_we0 <= ap_const_logic_1;
        else 
            placement_dynamic_bypass_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln685_1_fu_154_p3 <= 
        add_ln685_fu_142_p2 when (icmp_ln686_fu_148_p2(0) = '1') else 
        ap_sig_allocacmp_i_12_load;
    select_ln685_fu_201_p3 <= 
        ap_const_lv7_0 when (icmp_ln686_reg_341_pp0_iter1_reg(0) = '1') else 
        j_fu_66;
    select_ln686_1_fu_244_p3 <= 
        add_ln686_fu_225_p2 when (and_ln685_fu_219_p2(0) = '1') else 
        select_ln685_fu_201_p3;
    select_ln686_2_fu_172_p3 <= 
        ap_const_lv12_1 when (icmp_ln686_fu_148_p2(0) = '1') else 
        add_ln686_1_fu_166_p2;
    select_ln686_fu_236_p3 <= 
        ap_const_lv5_0 when (or_ln686_fu_231_p2(0) = '1') else 
        k_fu_62;
    tmp_24_cast_fu_272_p3 <= (grp_fu_293_p3 & ap_const_lv4_0);
    xor_ln685_fu_208_p2 <= (icmp_ln686_reg_341_pp0_iter1_reg xor ap_const_lv1_1);
    zext_ln688_2_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln686_reg_353),13));
    zext_ln688_3_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln688_1_fu_282_p2),64));
end behav;
